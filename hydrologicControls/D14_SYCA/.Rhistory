#load packages
require(rgdal)
library(rgdal)
library(plotly)
#NEON Domain number (ex: D01).
domainID<-'D14'
#Four-digit NEON site code (ex: HOPB).
siteID <- 'SYCA'
#The end date of the geomorphology survey (YYYYMMDD).
surveyDate<-'20181221'
#Stipulate 4-digit site code, underscore, and survey year (ex: HOPB_2017).
surveyID <- "SYCA_2018"
#Queues a directory that contains file paths for each site per survey date.
siteDirectory<-read.csv('N:/Science/AQU/Geomorphology_Survey_Data/inputDirectory.csv',head=T,sep=",",stringsAsFactors = F)
#Creates dataframe that contains survey data.
filePath <- siteDirectory$filePath[which(siteDirectory$surveyID==surveyID)]
surveyShapefileName <- siteDirectory$surveyShapefileName[which(siteDirectory$surveyID==surveyID)]
surveyPts <- readOGR(filePath,surveyShapefileName)
surveyPtsDF <- as.data.frame(surveyPts)
#Working directory where files will be output.
wdir<-paste('C:/Users/nharrison/Documents/GitHub/landWaterSoilIPT/streamMorpho/ScienceProcessingCode/R_Metrics',siteID,'Raw_Data',sep="/")
#wdir<-paste('C:/Users/kcawley/Documents/GitHub/landWaterSoilIPT/streamMorpho/ScienceProcessingCode/R_Metrics',siteID,'Raw_Data',sep="/")
#Creates dataframe of all points associated with transect DSC1.
dischargePointsXS1<-subset(surveyPtsDF,mapCode=="Transect_DSC1")
dischargePointsXS1<-dischargePointsXS1[order(-dischargePointsXS1$N),]
rownames(dischargePointsXS1)<-seq(length=nrow(dischargePointsXS1))
#Sets plot1 settings.
xAxisTitle1<-list(title="Easting (m)",zeroline=FALSE)
yAxisTitle1<-list(title="Northing  (m)",zeroline=FALSE)
font<-list(size=12,color='black')
#Plot the cross section by easting and northing data.
plot_ly(data=dischargePointsXS1,x=~E, y=~N, name='Easting vs Northing', type='scatter', mode='markers', text=~name)%>%
layout(title = siteID, xaxis=xAxisTitle1, yaxis=yAxisTitle1)
#Manually select NorthStart and EastStart coordinates
dischargeXS1NorthStart<-dischargePointsXS1$N[1]
dischargeXS1EastStart<-dischargePointsXS1$E[1]
#Assigns a raw Distance value to each point relative to the NorthStart and EastStart coordinates.
for(i in 1:(length(dischargePointsXS1$name))){
dischargeXS1PointN<-dischargePointsXS1$N[i]
dischargeXS1PointE<-dischargePointsXS1$E[i]
dischargePointsXS1$DistanceRaw[i]<-sqrt(((dischargeXS1PointN-dischargeXS1NorthStart)^2)+((dischargeXS1PointE-dischargeXS1EastStart)^2))
}
#To manually select ReferenceDistance:
dischargeXS1ReferenceDistance<-dischargePointsXS1$DistanceRaw[13]
#Sets Horizontal adjustment value based on reference point coordinate.
dischargeXS1HorizontalAdjust<-0-dischargeXS1ReferenceDistance
#Transforms raw distance to adjusted distance based on reference distance point.
for(i in 1:(length(dischargePointsXS1$name))){
dischargePointsXS1$DistanceAdj[i]<-dischargePointsXS1$DistanceRaw[i]+dischargeXS1HorizontalAdjust
}
#Plot the cross-section again to check reference values and ensure that the profile is being viewed from left to right bank.
#Sets plot2 settings.
xAxisTitle2<-list(title="Distance (m)",zeroline=FALSE)
yAxisTitle2<-list(title="Elevation  (m)",zeroline=FALSE)
font<-list(size=12,color='black')
#Plot the cross section by easting and northing data.
plot_ly(data=dischargePointsXS1,x=~DistanceAdj, y=~H, name='Distance vs Elevation', type='scatter', mode='lines+markers', text=~name)%>%
layout(title = siteID, xaxis=xAxisTitle2, yaxis=yAxisTitle2)
require(rgdal)
library(rgdal)
library(plotly)
#NEON Domain number (ex: D01).
domainID<-'D14'
#Four-digit NEON site code (ex: HOPB).
siteID <- 'SYCA'
#The end date of the geomorphology survey (YYYYMMDD).
surveyDate<-'20181221'
#Stipulate 4-digit site code, underscore, and survey year (ex: HOPB_2017).
surveyID <- "SYCA_2018"
#Queues a directory that contains file paths for each site per survey date.
siteDirectory<-read.csv('N:/Science/AQU/Geomorphology_Survey_Data/inputDirectory.csv',head=T,sep=",",stringsAsFactors = F)
#Creates dataframe that contains survey data.
filePath <- siteDirectory$filePath[which(siteDirectory$surveyID==surveyID)]
surveyShapefileName <- siteDirectory$surveyShapefileName[which(siteDirectory$surveyID==surveyID)]
surveyPts <- readOGR(filePath,surveyShapefileName)
surveyPtsDF <- as.data.frame(surveyPts)
#Working directory where files will be output.
wdir<-paste('C:/Users/nharrison/Documents/GitHub/landWaterSoilIPT/streamMorpho/ScienceProcessingCode/R_Metrics',siteID,'Raw_Data',sep="/")
#wdir<-paste('C:/Users/kcawley/Documents/GitHub/landWaterSoilIPT/streamMorpho/ScienceProcessingCode/R_Metrics',siteID,'Raw_Data',sep="/")
#Creates dataframe of all points associated with transect DSC1.
dischargePointsXS1<-subset(surveyPtsDF,mapCode=="Transect_DSC1")
dischargePointsXS1<-dischargePointsXS1[order(-dischargePointsXS1$N),]
rownames(dischargePointsXS1)<-seq(length=nrow(dischargePointsXS1))
filePath <- siteDirectory$filePath[which(siteDirectory$surveyID==surveyID)]
siteDirectory<-read.csv('N:/Science/AQU/Geomorphology_Survey_Data/inputDirectory.csv',head=T,sep=",",stringsAsFactors = F)
filePath <- siteDirectory$filePath[which(siteDirectory$surveyID==surveyID)]
siteDirectory<-read.csv('N:/Science/AQU/Geomorphology_Survey_Data/inputDirectory.csv',head=T,sep=",",stringsAsFactors = F)
filePath <- siteDirectory$filePath[which(siteDirectory$surveyID==surveyID)]
surveyShapefileName <- siteDirectory$surveyShapefileName[which(siteDirectory$surveyID==surveyID)]
surveyPts <- readOGR(filePath,surveyShapefileName)
surveyPtsDF <- as.data.frame(surveyPts)
wdir<-paste('C:/Users/nharrison/Documents/GitHub/landWaterSoilIPT/streamMorpho/ScienceProcessingCode/R_Metrics',siteID,'Raw_Data',sep="/")
#Creates dataframe of all points associated with transect DSC1.
dischargePointsXS1<-subset(surveyPtsDF,mapCode=="Transect_DSC1")
dischargePointsXS1<-dischargePointsXS1[order(-dischargePointsXS1$N),]
rownames(dischargePointsXS1)<-seq(length=nrow(dischargePointsXS1))
#Sets plot1 settings.
xAxisTitle1<-list(title="Easting (m)",zeroline=FALSE)
yAxisTitle1<-list(title="Northing  (m)",zeroline=FALSE)
font<-list(size=12,color='black')
#Plot the cross section by easting and northing data.
plot_ly(data=dischargePointsXS1,x=~E, y=~N, name='Easting vs Northing', type='scatter', mode='markers', text=~name)%>%
layout(title = siteID, xaxis=xAxisTitle1, yaxis=yAxisTitle1)
#Manually select NorthStart and EastStart coordinates
dischargeXS1NorthStart<-dischargePointsXS1$N[1]
dischargeXS1EastStart<-dischargePointsXS1$E[1]
#Assigns a raw Distance value to each point relative to the NorthStart and EastStart coordinates.
for(i in 1:(length(dischargePointsXS1$name))){
dischargeXS1PointN<-dischargePointsXS1$N[i]
dischargeXS1PointE<-dischargePointsXS1$E[i]
dischargePointsXS1$DistanceRaw[i]<-sqrt(((dischargeXS1PointN-dischargeXS1NorthStart)^2)+((dischargeXS1PointE-dischargeXS1EastStart)^2))
}
#To manually select ReferenceDistance:
dischargeXS1ReferenceDistance<-dischargePointsXS1$DistanceRaw[13]
#Sets Horizontal adjustment value based on reference point coordinate.
dischargeXS1HorizontalAdjust<-0-dischargeXS1ReferenceDistance
#Transforms raw distance to adjusted distance based on reference distance point.
for(i in 1:(length(dischargePointsXS1$name))){
dischargePointsXS1$DistanceAdj[i]<-dischargePointsXS1$DistanceRaw[i]+dischargeXS1HorizontalAdjust
}
#Plot the cross-section again to check reference values and ensure that the profile is being viewed from left to right bank.
#Sets plot2 settings.
xAxisTitle2<-list(title="Distance (m)",zeroline=FALSE)
yAxisTitle2<-list(title="Elevation  (m)",zeroline=FALSE)
font<-list(size=12,color='black')
#Plot the cross section by easting and northing data.
plot_ly(data=dischargePointsXS1,x=~DistanceAdj, y=~H, name='Distance vs Elevation', type='scatter', mode='lines+markers', text=~name)%>%
layout(title = siteID, xaxis=xAxisTitle2, yaxis=yAxisTitle2)
#Calculates the bankfull width.
DSCXS1Bankfull<-abs((dischargePointsXS1$DistanceAdj[grepl("RBF",dischargePointsXS1$name)])-(dischargePointsXS1$DistanceAdj[grepl("LBF",dischargePointsXS1$name)]))
#Creates dataframe of staff gauge points.
staffGaugePoints=subset(surveyPtsDF,surveyPtsDF$mapCode=="Gauge")
staffGaugePoints<-staffGaugePoints[order(staffGaugePoints$N),]
rownames(staffGaugePoints)<-seq(length=nrow(staffGaugePoints))
View(staffGaugePoints)
1.5-1.15
644.4329+.35
644.7829-644.7796
#Creates dataframe of staff gauge points.
staffGaugePoints=subset(surveyPtsDF,surveyPtsDF$mapCode=="Gauge")
staffGaugePoints<-staffGaugePoints[order(staffGaugePoints$N),]
rownames(staffGaugePoints)<-seq(length=nrow(staffGaugePoints))
#Set meter mark where the staff gauge was shot in and the name of the staff gauge point:
#Recorded in field data
staffGaugeMeterMark<-1.50
staffGaugeElevation <- staffGaugePoints$H[grepl("SP_1.50M",staffGaugePoints$name)]
#Converts discharge XS1 transect point elevations to gauge height (rounded to 2 digits).
dischargePointsXS1$gaugeHeight<-dischargePointsXS1$H - (staffGaugeElevation - staffGaugeMeterMark)
dischargePointsXS1$gaugeHeight<-round(dischargePointsXS1$gaugeHeight,digits=2)
#Assigns a unique to each measurement for plot viewing purposes.
dischargePointsXS1$ID<-c(1:length(dischargePointsXS1$name))
dischargePointsXS1 <- dischargePointsXS1[order(dischargePointsXS1$DistanceAdj),]
#invisible(dev.new(noRStudioGD = TRUE))
#Sets plot3 settings.
xAxisTitle3<-list(title="Distance (m)",zeroline=FALSE, range=c(-5,15))
yAxisTitle3<-list(title="Gauge Height  (m)",zeroline=FALSE)
font<-list(size=12,color='black')
#Plot the cross section by distance and gauge height.  Note whether or not red line is below thalweg.
plot_ly(data=dischargePointsXS1,x=~DistanceAdj, y=~gaugeHeight, name='Distance vs. Gauge Height', type='scatter', mode='markers+lines', text=~name)%>%
add_trace(y= 0,name = 'Gauge Height = 0.00m',mode='lines',line = list(color = 'red', width = 2, dash='dash')) %>%
layout(title = siteID, xaxis=xAxisTitle3, yaxis=yAxisTitle3)
#Calculates gaugeHeight at LB and RB bankfull:
gaugeHeightLBF<-dischargePointsXS1$gaugeHeight[grepl("LBF",dischargePointsXS1$name)]
gaugeHeightRBF<-dischargePointsXS1$gaugeHeight[grepl("RBF",dischargePointsXS1$name)]
#Asseses whether negative stage is present in the discharge cross-section
negativeStage<-any(dischargePointsXS1$gaugeHeight<0)
if(negativeStage==TRUE){
exectpart<-TRUE
}else{exectpart<-FALSE}
#This section will only run if there are negative values in the gauge height column.
if(exectpart){
#Determines the lowest elevation of the discharge cross-section, assumed to be the thalweg.
dischargeXS1THL<-min(dischargePointsXS1$H)
#Calculates the elevation of the 0.00 meter mark of the staff gauge.
staffGaugeZeroElevation<-(staffGaugePoints$H[staffGaugePoints$name=="SP_1.50M"])-staffGaugeMeterMark
#Calculates the difference between the staff gauge 0.00m mark elevation and the discharge thalweg elevation.
gaugeZeroQElevDiff<--as.numeric(dischargeXS1THL-staffGaugeZeroElevation)
#Offsets the elevation of the gauge heights by this difference, rounds to two digits.
dischargePointsXS1$gaugeOffsetElevation<-dischargePointsXS1$H + (gaugeZeroQElevDiff)
dischargePointsXS1$gaugeOffsetElevation<-round(dischargePointsXS1$gaugeOffsetElevation,digits=2)
#Offsets the gauge heights by the offset elevation, rounds to two digits.
dischargePointsXS1$gaugeHeightOffset<-dischargePointsXS1$gaugeOffsetElevation - (staffGaugeElevation - staffGaugeMeterMark)
dischargePointsXS1$gaugeHeightOffset<-round(dischargePointsXS1$gaugeHeightOffset,digits=2)
#Plots discharge XS1 transect point distances vs gaugeHeightOffset.  Red line should be at the thalweg.
plot_ly(data=dischargePointsXS1,x=~DistanceAdj, y=~gaugeHeightOffset, name='Distance vs. Gauge Height', type='scatter', mode='markers+lines', text=~name)%>%
add_trace(y= 0,name = 'Gauge Height = 0.00m',mode='lines',line = list(color = 'red', width = 2, dash='dash')) %>%
layout(title = siteID, xaxis=xAxisTitle2, yaxis=yAxisTitle2)
}else{"There are no negative gauge height values in discharge XS1.  There is no need for correction."}
options(stringsAsFactors = FALSE,scipen = 999)
#Install neonUtilities  (can skip if already installed).
#install.packages("neonUtilities")
#install.packages("plotly")
#Load required packages (install these if not present).
library(neonUtilities)
library(plotly)
source("~/GitHub/NEON-AQU-data-quality/gaugeDischargePlotting/conv.calc.Q.R")
#Enter the data product ID (NEON discharge measurement collection = 20048) and enter the site ID (i.e. POSE) from which you wish to plot stage/Q data.
DPID <- "20048" #Look up the DP number at https://data.neonscience.org/data-product-catalog
siteID <- "SYCA"
#Enter the working directory where stacked data is to be sent by the API.
setwd<-"C:/Users/nharrison/Documents/Discharge_Data"
#Deletes the old folder (if present) that contains previously stacked data.
file.remove("filesToStack20048")
unlink('C:/Users/nharrison/Documents/Discharge_Data/filesToStack20048',recursive=TRUE)
#Utilizes the API to get discharge data and unzip it into working directory.  Choose one site at a time or all, if using all it will take a few minutes at least.
zipsByProduct(dpID=paste0("DP1.",DPID,".001"),
site=siteID,
package="expanded",
check.size=FALSE,
savepath = setwd)
stackByTable(filepath = paste0(setwd,"/filesToStack",DPID),
folder=TRUE)
#Read in the stacked data files.
allTables <- list.files(paste0(setwd,"/filesToStack",DPID,"/stackedFiles"))
for(i in allTables){
assign(gsub("\\.csv","",i),
read.delim(paste0(setwd,"/filesToStack",DPID,"/stackedFiles/",i),
sep = ","))
}
#Recalculate L1 discharge values using point information.
dsc_fieldData <- conv.calc.Q(stageData = dsc_fieldData,dischargeData = dsc_individualFieldData)
#Set start and end dates to determine which data gets plotted.  Note that the API call gets all the data available for a given site.
startDate <- "2014-10-01"
endDate <- "2019-04-10"
#Subsets the data based on the start and end dates specified above.
dsc_fieldDataPlot <- dsc_fieldData[dsc_fieldData$startDate>=startDate&dsc_fieldData$startDate<endDate,]
#Sorts the data by startDate.
dsc_fieldDataPlot <- dsc_fieldDataPlot[order(dsc_fieldDataPlot$startDate),]
#creates a simplified dataframe that shows all stage/Q data and identifies the  water year.
allStageQ<-data.frame(matrix(nrow=length(dsc_fieldDataPlot$calcQ),ncol=7))
names(allStageQ)=c("site","orderID","collectDate","waterYear","GaugeHeight","Discharge (lps)","Discharge (cfs)")
allStageQ$site<-siteID
allStageQ$orderID<-1:length(allStageQ$collectDate)
allStageQ$collectDate<-dsc_fieldDataPlot$collectDate
allStageQ$collectDate <-  as.POSIXct(allStageQ$collectDate)
for(i in 1:(length(allStageQ$collectDate))){
if(allStageQ$collectDate[i]>="2015-10-01" & allStageQ$collectDate[i]<"2016-10-01"){
allStageQ$waterYear[i]<-"2016"
} else {
if(allStageQ$collectDate[i]>="2016-10-01" & allStageQ$collectDate[i]<"2017-10-01"){
allStageQ$waterYear[i]<-"2017"
} else {
if(allStageQ$collectDate[i]>="2017-10-01" & allStageQ$collectDate[i]<"2018-10-01"){
allStageQ$waterYear[i]<-"2018"
} else {
if(allStageQ$collectDate[i]>="2018-10-01" & allStageQ$collectDate[i]<"2019-10-01"){
allStageQ$waterYear[i]<-"2019"
} else {
if(allStageQ$collectDate[i]>="2019-10-01" & allStageQ$collectDate[i]<"2020-10-01"){
allStageQ$waterYear[i]<-"2020"
} else{allStageQ$waterYear[1]<-"NA"}
}}}}}
allStageQ$GaugeHeight<-dsc_fieldDataPlot$streamStage
allStageQ$`Discharge (lps)`<-dsc_fieldDataPlot$calcQ
allStageQ$`Discharge (lps)`<-round(allStageQ$`Discharge (lps)`,digits=0)
allStageQ$`Discharge (cfs)`<-allStageQ$`Discharge (lps)`*0.0353147
allStageQ$`Discharge (cfs)`<-round(allStageQ$`Discharge (cfs)`,digits=1)
#Subsets stage-Q data into individual water year dataframes.
wy15<-subset(allStageQ,allStageQ$waterYear=='2015')
wy16<-subset(allStageQ,allStageQ$waterYear=='2016')
wy17<-subset(allStageQ,allStageQ$waterYear=='2017')
wy18<-subset(allStageQ,allStageQ$waterYear=='2018')
wy19<-subset(allStageQ,allStageQ$waterYear=='2019')
wy20<-subset(allStageQ,allStageQ$waterYear=='2020')
#Plots data by water year.
tick<-list(size=20,family="Arial, sans-serif",color='black')
font<-list(size=19,color='black')
xAxis<-list(title="Gauge Height (m)", zeroline=FALSE,type="log",titlefont=font, tickfont=tick)
yAxis<-list(title="Discharge (lps)", zeroline=FALSE,type="log",titlefont=font, tickfont=tick)
plot_ly(data=wy19,x=~GaugeHeight, y=~`Discharge (lps)`, name=~waterYear, type='scatter', mode='markers',text=~paste("collectDate:",collectDate,";","orderID:",orderID),marker=list(size=15,line=list(color='black',width=1)))%>%
add_trace(data=wy18,x= ~GaugeHeight, y=~`Discharge (lps)`,name = ~waterYear,type='scatter', mode='markers', text=~paste("collectDate:",collectDate,";","orderID:",orderID), marker=list(size=15,line=list(color='black',width=1)))%>%
add_trace(data=wy17,x= ~GaugeHeight, y=~`Discharge (lps)`,name = ~waterYear,type='scatter', mode='markers', text=~paste("collectDate:",collectDate,";","orderID:",orderID), marker=list(size=15,line=list(color='black',width=1)))%>%
add_trace(data=wy16,x= ~GaugeHeight, y=~`Discharge (lps)`,name = ~waterYear,type='scatter', mode='markers', text=~paste("collectDate:",collectDate,";","orderID:",orderID), marker=list(size=15,line=list(color='black',width=1)))%>%
add_trace(data=wy15,x= ~GaugeHeight, y=~`Discharge (lps)`,name = ~waterYear,type='scatter', mode='markers', text=~paste("collectDate:",collectDate,";","orderID:",orderID), marker=list(size=15,line=list(color='black',width=1)))%>%
add_trace(data=wy20,x= ~GaugeHeight, y=~`Discharge (lps)`,name = ~waterYear,type='scatter', mode='markers', text=~paste("collectDate:",collectDate,";","orderID:",orderID), marker=list(size=15,line=list(color='black',width=1)))%>%
layout(title = paste(siteID,":","Gauge Height (m) vs. Discharge (lps)"), xaxis=xAxis, yaxis=yAxis)
#Calcs median discharge data for all years.
median<-median(allStageQ$`Discharge (lps)`,na.rm=TRUE)
wy16RatingIDs<-4
wy16Rating<-allStageQ<-data.frame(matrix(nrow=length(dsc_fieldDataPlot$calcQ),ncol=7))
names(wy16Rating)=c("site","orderID","collectDate","waterYear","GaugeHeight","Discharge (lps)","Discharge (cfs)")
wy16Rating$site<-siteID
wy16Rating$collectDate<-subset(allStageQ$waterYear,allStageQ$orderID=='4')
test<-wy16[wy16$orderID==paste(2,4,6,8),1:7]
