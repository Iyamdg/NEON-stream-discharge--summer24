rownames(dischargePointsXS1)<-seq(length=nrow(dischargePointsXS1))
#Sets plot1 settings.
xAxisTitle1<-list(title="Easting (m)",zeroline=FALSE)
yAxisTitle1<-list(title="Northing  (m)",zeroline=FALSE)
font<-list(size=12,color='black')
#Plot the cross section by easting and northing data.
plot_ly(data=dischargePointsXS1,x=~E, y=~N, name='Easting vs Northing', type='scatter', mode='markers', text=~name)%>%
layout(title = siteID, xaxis=xAxisTitle1, yaxis=yAxisTitle1)
#Manually select NorthStart and EastStart coordinates
dischargeXS1NorthStart<-dischargePointsXS1$N[1]
dischargeXS1EastStart<-dischargePointsXS1$E[1]
#Assigns a raw Distance value to each point relative to the NorthStart and EastStart coordinates.
for(i in 1:(length(dischargePointsXS1$name))){
dischargeXS1PointN<-dischargePointsXS1$N[i]
dischargeXS1PointE<-dischargePointsXS1$E[i]
dischargePointsXS1$DistanceRaw[i]<-sqrt(((dischargeXS1PointN-dischargeXS1NorthStart)^2)+((dischargeXS1PointE-dischargeXS1EastStart)^2))
}
#To manually select ReferenceDistance:
dischargeXS1ReferenceDistance<-dischargePointsXS1$DistanceRaw[1]
#Sets Horizontal adjustment value based on reference point coordinate.
dischargeXS1HorizontalAdjust<-0-dischargeXS1ReferenceDistance
#Transforms raw distance to adjusted distance based on reference distance point.
for(i in 1:(length(dischargePointsXS1$name))){
dischargePointsXS1$DistanceAdj[i]<-dischargePointsXS1$DistanceRaw[i]+dischargeXS1HorizontalAdjust
}
#Plot the cross-section again to check reference values and ensure that the profile is being viewed from left to right bank.
#Sets plot2 settings.
xAxisTitle2<-list(title="Distance (m)",zeroline=FALSE)
yAxisTitle2<-list(title="Elevation  (m)",zeroline=FALSE)
font<-list(size=12,color='black')
#Plot the cross section by easting and northing data.
plot_ly(data=dischargePointsXS1,x=~DistanceAdj, y=~H, name='Distance vs Elevation', type='scatter', mode='lines+markers', text=~name)%>%
layout(title = siteID, xaxis=xAxisTitle2, yaxis=yAxisTitle2)
#Calculates the bankfull width.
DSCXS1Bankfull<-abs((dischargePointsXS1$DistanceAdj[grepl("RBF",dischargePointsXS1$name)])-(dischargePointsXS1$DistanceAdj[grepl("LBF",dischargePointsXS1$name)]))
#Creates dataframe of staff gauge points.
staffGaugePoints=subset(surveyPtsDF,surveyPtsDF$mapCode=="Gauge")
staffGaugePoints<-staffGaugePoints[order(staffGaugePoints$N),]
rownames(staffGaugePoints)<-seq(length=nrow(staffGaugePoints))
#Set meter mark where the staff gauge was shot in and the name of the staff gauge point:
#Recorded in field data
staffGaugeMeterMark<-1.05
staffGaugeElevation <- staffGaugePoints$H[grepl("SP_1.05M_TEMP",staffGaugePoints$name)]
#Converts discharge XS1 transect point elevations to gauge height (rounded to 2 digits).
dischargePointsXS1$gaugeHeight<-dischargePointsXS1$H - (staffGaugeElevation - staffGaugeMeterMark)
dischargePointsXS1$gaugeHeight<-round(dischargePointsXS1$gaugeHeight,digits=2)
#Assigns a unique to each measurement for plot viewing purposes.
dischargePointsXS1$ID<-c(1:length(dischargePointsXS1$name))
dischargePointsXS1 <- dischargePointsXS1[order(dischargePointsXS1$DistanceAdj),]
#invisible(dev.new(noRStudioGD = TRUE))
#Sets plot3 settings.
xAxisTitle3<-list(title="Distance (m)",zeroline=FALSE, range=c(-5,15))
yAxisTitle3<-list(title="Gauge Height  (m)",zeroline=FALSE)
font<-list(size=12,color='black')
#Plot the cross section by distance and gauge height.  Note whether or not red line is below thalweg.
plot_ly(data=dischargePointsXS1,x=~DistanceAdj, y=~gaugeHeight, name='Distance vs. Gauge Height', type='scatter', mode='markers+lines', text=~name)%>%
add_trace(y= 0,name = 'Gauge Height = 0.00m',mode='lines',line = list(color = 'red', width = 2, dash='dash')) %>%
layout(title = siteID, xaxis=xAxisTitle3, yaxis=yAxisTitle3)
#Calculates gaugeHeight at LB and RB bankfull:
gaugeHeightLBF<-dischargePointsXS1$gaugeHeight[grepl("LBF",dischargePointsXS1$name)]
gaugeHeightRBF<-dischargePointsXS1$gaugeHeight[grepl("RBF",dischargePointsXS1$name)]
#load packages
require(rgdal)
library(rgdal)
library(plotly)
#NEON Domain number (ex: D01).
domainID<-'D01'
#Four-digit NEON site code (ex: HOPB).
siteID <- 'HOPB'
#The end date of the geomorphology survey (YYYYMMDD).
surveyDate<-'20170921'
#Stipulate 4-digit site code, underscore, and survey year (ex: HOPB_2017).
surveyID <- "HOPB_2017"
#Queues a directory that contains file paths for each site per survey date.
siteDirectory<-read.csv('N:/Science/AQU/Geomorphology_Survey_Data/inputDirectory.csv',head=T,sep=",",stringsAsFactors = F)
#Creates dataframe that contains survey data.
filePath <- siteDirectory$filePath[which(siteDirectory$surveyID==surveyID)]
surveyShapefileName <- siteDirectory$surveyShapefileName[which(siteDirectory$surveyID==surveyID)]
surveyPts <- readOGR(filePath,surveyShapefileName)
surveyPtsDF <- as.data.frame(surveyPts)
#Working directory where files will be output.
wdir<-paste('C:/Users/nharrison/Documents/GitHub/landWaterSoilIPT/streamMorpho/ScienceProcessingCode/R_Metrics',siteID,'Raw_Data',sep="/")
#wdir<-paste('C:/Users/kcawley/Documents/GitHub/landWaterSoilIPT/streamMorpho/ScienceProcessingCode/R_Metrics',siteID,'Raw_Data',sep="/")
#Creates dataframe of all points associated with transect DSC1.
dischargePointsXS1<-subset(surveyPtsDF,mapCode=="Transect_DSC")
dischargePointsXS1<-dischargePointsXS1[order(dischargePointsXS1$N),]
rownames(dischargePointsXS1)<-seq(length=nrow(dischargePointsXS1))
#Sets plot1 settings.
xAxisTitle1<-list(title="Easting (m)",zeroline=FALSE)
yAxisTitle1<-list(title="Northing  (m)",zeroline=FALSE)
font<-list(size=12,color='black')
#Plot the cross section by easting and northing data.
plot_ly(data=dischargePointsXS1,x=~E, y=~N, name='Easting vs Northing', type='scatter', mode='markers', text=~name)%>%
layout(title = siteID, xaxis=xAxisTitle1, yaxis=yAxisTitle1)
#Manually select NorthStart and EastStart coordinates
dischargeXS1NorthStart<-dischargePointsXS1$N[1]
dischargeXS1EastStart<-dischargePointsXS1$E[1]
#Assigns a raw Distance value to each point relative to the NorthStart and EastStart coordinates.
for(i in 1:(length(dischargePointsXS1$name))){
dischargeXS1PointN<-dischargePointsXS1$N[i]
dischargeXS1PointE<-dischargePointsXS1$E[i]
dischargePointsXS1$DistanceRaw[i]<-sqrt(((dischargeXS1PointN-dischargeXS1NorthStart)^2)+((dischargeXS1PointE-dischargeXS1EastStart)^2))
}
#To manually select ReferenceDistance:
dischargeXS1ReferenceDistance<-dischargePointsXS1$DistanceRaw[2]
#Sets Horizontal adjustment value based on reference point coordinate.
dischargeXS1HorizontalAdjust<-0-dischargeXS1ReferenceDistance
#Transforms raw distance to adjusted distance based on reference distance point.
for(i in 1:(length(dischargePointsXS1$name))){
dischargePointsXS1$DistanceAdj[i]<-dischargePointsXS1$DistanceRaw[i]+dischargeXS1HorizontalAdjust
}
#Plot the cross-section again to check reference values and ensure that the profile is being viewed from left to right bank.
#Sets plot2 settings.
xAxisTitle2<-list(title="Distance (m)",zeroline=FALSE)
yAxisTitle2<-list(title="Elevation  (m)",zeroline=FALSE)
font<-list(size=12,color='black')
#Plot the cross section by easting and northing data.
plot_ly(data=dischargePointsXS1,x=~DistanceAdj, y=~H, name='Distance vs Elevation', type='scatter', mode='lines+markers', text=~name)%>%
layout(title = siteID, xaxis=xAxisTitle2, yaxis=yAxisTitle2)
#Calculates the bankfull width.
DSCXS1Bankfull<-abs((dischargePointsXS1$DistanceAdj[grepl("RBF",dischargePointsXS1$name)])-(dischargePointsXS1$DistanceAdj[grepl("LBF",dischargePointsXS1$name)]))
#Creates dataframe of staff gauge points.
staffGaugePoints=subset(surveyPtsDF,surveyPtsDF$mapCode=="Gauge")
staffGaugePoints<-staffGaugePoints[order(staffGaugePoints$N),]
rownames(staffGaugePoints)<-seq(length=nrow(staffGaugePoints))
#Set meter mark where the staff gauge was shot in and the name of the staff gauge point:
#Recorded in field data
staffGaugeMeterMark<-0.265
staffGaugeElevation <- staffGaugePoints$H[grepl("SP_.265M",staffGaugePoints$name)]
#Converts discharge XS1 transect point elevations to gauge height (rounded to 2 digits).
dischargePointsXS1$gaugeHeight<-dischargePointsXS1$H - (staffGaugeElevation - staffGaugeMeterMark)
dischargePointsXS1$gaugeHeight<-round(dischargePointsXS1$gaugeHeight,digits=2)
#Assigns a unique to each measurement for plot viewing purposes.
dischargePointsXS1$ID<-c(1:length(dischargePointsXS1$name))
dischargePointsXS1 <- dischargePointsXS1[order(dischargePointsXS1$DistanceAdj),]
#invisible(dev.new(noRStudioGD = TRUE))
#Sets plot3 settings.
xAxisTitle3<-list(title="Distance (m)",zeroline=FALSE, range=c(-5,15))
yAxisTitle3<-list(title="Gauge Height  (m)",zeroline=FALSE)
font<-list(size=12,color='black')
#Plot the cross section by distance and gauge height.  Note whether or not red line is below thalweg.
plot_ly(data=dischargePointsXS1,x=~DistanceAdj, y=~gaugeHeight, name='Distance vs. Gauge Height', type='scatter', mode='markers+lines', text=~name)%>%
add_trace(y= 0,name = 'Gauge Height = 0.00m',mode='lines',line = list(color = 'red', width = 2, dash='dash')) %>%
layout(title = siteID, xaxis=xAxisTitle3, yaxis=yAxisTitle3)
#Calculates gaugeHeight at LB and RB bankfull:
gaugeHeightLBF<-dischargePointsXS1$gaugeHeight[grepl("LBF",dischargePointsXS1$name)]
gaugeHeightRBF<-dischargePointsXS1$gaugeHeight[grepl("RBF",dischargePointsXS1$name)]
#load packages
require(rgdal)
library(rgdal)
library(plotly)
#NEON Domain number (ex: D01).
domainID<-'D01'
#Four-digit NEON site code (ex: HOPB).
siteID <- 'HOPB'
#The end date of the geomorphology survey (YYYYMMDD).
surveyDate<-'20170921'
#Stipulate 4-digit site code, underscore, and survey year (ex: HOPB_2017).
surveyID <- "HOPB_2017"
#Queues a directory that contains file paths for each site per survey date.
siteDirectory<-read.csv('N:/Science/AQU/Geomorphology_Survey_Data/inputDirectory.csv',head=T,sep=",",stringsAsFactors = F)
#Creates dataframe that contains survey data.
filePath <- siteDirectory$filePath[which(siteDirectory$surveyID==surveyID)]
surveyShapefileName <- siteDirectory$surveyShapefileName[which(siteDirectory$surveyID==surveyID)]
surveyPts <- readOGR(filePath,surveyShapefileName)
surveyPtsDF <- as.data.frame(surveyPts)
#load packages
require(rgdal)
library(rgdal)
library(plotly)
#NEON Domain number (ex: D01).
domainID<-'D01'
#Four-digit NEON site code (ex: HOPB).
siteID <- 'HOPB'
#The end date of the geomorphology survey (YYYYMMDD).
surveyDate<-'20170921'
#Stipulate 4-digit site code, underscore, and survey year (ex: HOPB_2017).
surveyID <- "HOPB_2017"
#Queues a directory that contains file paths for each site per survey date.
siteDirectory<-read.csv('N:/Science/AQU/Geomorphology_Survey_Data/inputDirectory.csv',head=T,sep=",",stringsAsFactors = F)
#Creates dataframe that contains survey data.
filePath <- siteDirectory$filePath[which(siteDirectory$surveyID==surveyID)]
surveyShapefileName <- siteDirectory$surveyShapefileName[which(siteDirectory$surveyID==surveyID)]
surveyPts <- readOGR(filePath,surveyShapefileName)
surveyPtsDF <- as.data.frame(surveyPts)
#Working directory where files will be output.
wdir<-paste('C:/Users/nharrison/Documents/GitHub/landWaterSoilIPT/streamMorpho/ScienceProcessingCode/R_Metrics',siteID,'Raw_Data',sep="/")
#wdir<-paste('C:/Users/kcawley/Documents/GitHub/landWaterSoilIPT/streamMorpho/ScienceProcessingCode/R_Metrics',siteID,'Raw_Data',sep="/")
#Creates dataframe of all points associated with transect DSC1.
dischargePointsXS1<-subset(surveyPtsDF,mapCode=="Transect_DSC")
dischargePointsXS1<-dischargePointsXS1[order(dischargePointsXS1$N),]
rownames(dischargePointsXS1)<-seq(length=nrow(dischargePointsXS1))
#Sets plot1 settings.
xAxisTitle1<-list(title="Easting (m)",zeroline=FALSE)
yAxisTitle1<-list(title="Northing  (m)",zeroline=FALSE)
font<-list(size=12,color='black')
#Plot the cross section by easting and northing data.
plot_ly(data=dischargePointsXS1,x=~E, y=~N, name='Easting vs Northing', type='scatter', mode='markers', text=~name)%>%
layout(title = siteID, xaxis=xAxisTitle1, yaxis=yAxisTitle1)
#Manually select NorthStart and EastStart coordinates
dischargeXS1NorthStart<-dischargePointsXS1$N[1]
dischargeXS1EastStart<-dischargePointsXS1$E[1]
#Assigns a raw Distance value to each point relative to the NorthStart and EastStart coordinates.
for(i in 1:(length(dischargePointsXS1$name))){
dischargeXS1PointN<-dischargePointsXS1$N[i]
dischargeXS1PointE<-dischargePointsXS1$E[i]
dischargePointsXS1$DistanceRaw[i]<-sqrt(((dischargeXS1PointN-dischargeXS1NorthStart)^2)+((dischargeXS1PointE-dischargeXS1EastStart)^2))
}
#To manually select ReferenceDistance:
dischargeXS1ReferenceDistance<-dischargePointsXS1$DistanceRaw[2]
#Sets Horizontal adjustment value based on reference point coordinate.
dischargeXS1HorizontalAdjust<-0-dischargeXS1ReferenceDistance
#Transforms raw distance to adjusted distance based on reference distance point.
for(i in 1:(length(dischargePointsXS1$name))){
dischargePointsXS1$DistanceAdj[i]<-dischargePointsXS1$DistanceRaw[i]+dischargeXS1HorizontalAdjust
}
#Plot the cross-section again to check reference values and ensure that the profile is being viewed from left to right bank.
#Sets plot2 settings.
xAxisTitle2<-list(title="Distance (m)",zeroline=FALSE)
yAxisTitle2<-list(title="Elevation  (m)",zeroline=FALSE)
font<-list(size=12,color='black')
#Plot the cross section by easting and northing data.
plot_ly(data=dischargePointsXS1,x=~DistanceAdj, y=~H, name='Distance vs Elevation', type='scatter', mode='lines+markers', text=~name)%>%
layout(title = siteID, xaxis=xAxisTitle2, yaxis=yAxisTitle2)
#Calculates the bankfull width.
DSCXS1Bankfull<-abs((dischargePointsXS1$DistanceAdj[grepl("RBF",dischargePointsXS1$name)])-(dischargePointsXS1$DistanceAdj[grepl("LBF",dischargePointsXS1$name)]))
#Creates dataframe of staff gauge points.
staffGaugePoints=subset(surveyPtsDF,surveyPtsDF$mapCode=="Gauge")
staffGaugePoints<-staffGaugePoints[order(staffGaugePoints$N),]
rownames(staffGaugePoints)<-seq(length=nrow(staffGaugePoints))
#Set meter mark where the staff gauge was shot in and the name of the staff gauge point:
#Recorded in field data
staffGaugeMeterMark<-0.265
staffGaugeElevation <- staffGaugePoints$H[grepl("SP_.265M",staffGaugePoints$name)]
#Converts discharge XS1 transect point elevations to gauge height (rounded to 2 digits).
dischargePointsXS1$gaugeHeight<-dischargePointsXS1$H - (staffGaugeElevation - staffGaugeMeterMark)
dischargePointsXS1$gaugeHeight<-round(dischargePointsXS1$gaugeHeight,digits=2)
#Assigns a unique to each measurement for plot viewing purposes.
dischargePointsXS1$ID<-c(1:length(dischargePointsXS1$name))
dischargePointsXS1 <- dischargePointsXS1[order(dischargePointsXS1$DistanceAdj),]
#invisible(dev.new(noRStudioGD = TRUE))
#Sets plot3 settings.
xAxisTitle3<-list(title="Distance (m)",zeroline=FALSE, range=c(-5,15))
yAxisTitle3<-list(title="Gauge Height  (m)",zeroline=FALSE)
font<-list(size=12,color='black')
#Plot the cross section by distance and gauge height.  Note whether or not red line is below thalweg.
plot_ly(data=dischargePointsXS1,x=~DistanceAdj, y=~gaugeHeight, name='Distance vs. Gauge Height', type='scatter', mode='markers+lines', text=~name)%>%
add_trace(y= 0,name = 'Gauge Height = 0.00m',mode='lines',line = list(color = 'red', width = 2, dash='dash')) %>%
layout(title = siteID, xaxis=xAxisTitle3, yaxis=yAxisTitle3)
#Calculates gaugeHeight at LB and RB bankfull:
gaugeHeightLBF<-dischargePointsXS1$gaugeHeight[grepl("LBF",dischargePointsXS1$name)]
gaugeHeightRBF<-dischargePointsXS1$gaugeHeight[grepl("RBF",dischargePointsXS1$name)]
#Asseses whether negative stage is present in the discharge cross-section
negativeStage<-any(dischargePointsXS1$gaugeHeight<0)
if(negativeStage==TRUE){
exectpart<-TRUE
}else{exectpart<-FALSE}
#This section will only run if there are negative values in the gauge height column.
if(exectpart){
#Determines the lowest elevation of the discharge cross-section, assumed to be the thalweg.
dischargeXS1THL<-min(dischargePointsXS1$H)
#Calculates the elevation of the 0.00 meter mark of the staff gauge.
staffGaugeZeroElevation<-(staffGaugePoints$H[staffGaugePoints$name=="SP_.265M"])-staffGaugeMeterMark
#Calculates the difference between the staff gauge 0.00m mark elevation and the discharge thalweg elevation.
gaugeZeroQElevDiff<--as.numeric(dischargeXS1THL-staffGaugeZeroElevation)
#Offsets the elevation of the gauge heights by this difference, rounds to two digits.
dischargePointsXS1$gaugeOffsetElevation<-dischargePointsXS1$H + (gaugeZeroQElevDiff)
dischargePointsXS1$gaugeOffsetElevation<-round(dischargePointsXS1$gaugeOffsetElevation,digits=2)
#Offsets the gauge heights by the offset elevation, rounds to two digits.
dischargePointsXS1$gaugeHeightOffset<-dischargePointsXS1$gaugeOffsetElevation - (staffGaugeElevation - staffGaugeMeterMark)
dischargePointsXS1$gaugeHeightOffset<-round(dischargePointsXS1$gaugeHeightOffset,digits=2)
#Plots discharge XS1 transect point distances vs gaugeHeightOffset.  Red line should be at the thalweg.
plot_ly(data=dischargePointsXS1,x=~DistanceAdj, y=~gaugeHeight, name='Distance vs. Gauge Height', type='scatter', mode='markers+lines', text=~name)%>%
add_trace(y= 0,name = 'Gauge Height = 0.00m',mode='lines',line = list(color = 'red', width = 2, dash='dash')) %>%
layout(title = siteID, xaxis=xAxisTitle2, yaxis=yAxisTitle2)
}else{"There are no negative gauge height values in discharge XS1.  There is no need for correction."}
#load packages
require(rgdal)
library(rgdal)
library(plotly)
#NEON Domain number (ex: D01).
domainID<-'D02'
#Four-digit NEON site code (ex: HOPB).
siteID <- 'POSE'
#The end date of the geomorphology survey (YYYYMMDD).
surveyDate<-'20180221'
#Stipulate 4-digit site code, underscore, and survey year (ex: HOPB_2017).
surveyID <- "POSE_2018"
#Queues a directory that contains file paths for each site per survey date.
siteDirectory<-read.csv('N:/Science/AQU/Geomorphology_Survey_Data/inputDirectory.csv',head=T,sep=",",stringsAsFactors = F)
#Creates dataframe that contains survey data.
filePath <- siteDirectory$filePath[which(siteDirectory$surveyID==surveyID)]
surveyShapefileName <- siteDirectory$surveyShapefileName[which(siteDirectory$surveyID==surveyID)]
surveyPts <- readOGR(filePath,surveyShapefileName)
surveyPtsDF <- as.data.frame(surveyPts)
#Working directory where files will be output.
wdir<-paste('C:/Users/nharrison/Documents/GitHub/landWaterSoilIPT/streamMorpho/ScienceProcessingCode/R_Metrics',siteID,'Raw_Data',sep="/")
#wdir<-paste('C:/Users/kcawley/Documents/GitHub/landWaterSoilIPT/streamMorpho/ScienceProcessingCode/R_Metrics',siteID,'Raw_Data',sep="/")
#Creates dataframe of all points associated with transect DSC1.
dischargePointsXS1<-subset(surveyPtsDF,mapCode=="Transect_DSC1")
dischargePointsXS1<-dischargePointsXS1[order(-dischargePointsXS1$N),]
rownames(dischargePointsXS1)<-seq(length=nrow(dischargePointsXS1))
#Sets plot1 settings.
xAxisTitle1<-list(title="Easting (m)",zeroline=FALSE)
yAxisTitle1<-list(title="Northing  (m)",zeroline=FALSE)
font<-list(size=12,color='black')
#Plot the cross section by easting and northing data.
plot_ly(data=dischargePointsXS1,x=~E, y=~N, name='Easting vs Northing', type='scatter', mode='markers', text=~name)%>%
layout(title = siteID, xaxis=xAxisTitle1, yaxis=yAxisTitle1)
#Manually select NorthStart and EastStart coordinates
dischargeXS1NorthStart<-dischargePointsXS1$N[1]
dischargeXS1EastStart<-dischargePointsXS1$E[1]
#Assigns a raw Distance value to each point relative to the NorthStart and EastStart coordinates.
for(i in 1:(length(dischargePointsXS1$name))){
dischargeXS1PointN<-dischargePointsXS1$N[i]
dischargeXS1PointE<-dischargePointsXS1$E[i]
dischargePointsXS1$DistanceRaw[i]<-sqrt(((dischargeXS1PointN-dischargeXS1NorthStart)^2)+((dischargeXS1PointE-dischargeXS1EastStart)^2))
}
#To manually select ReferenceDistance:
dischargeXS1ReferenceDistance<-dischargePointsXS1$DistanceRaw[6]
#Sets Horizontal adjustment value based on reference point coordinate.
dischargeXS1HorizontalAdjust<-0-dischargeXS1ReferenceDistance
#Transforms raw distance to adjusted distance based on reference distance point.
for(i in 1:(length(dischargePointsXS1$name))){
dischargePointsXS1$DistanceAdj[i]<-dischargePointsXS1$DistanceRaw[i]+dischargeXS1HorizontalAdjust
}
#Plot the cross-section again to check reference values and ensure that the profile is being viewed from left to right bank.
#Sets plot2 settings.
xAxisTitle2<-list(title="Distance (m)",zeroline=FALSE)
yAxisTitle2<-list(title="Elevation  (m)",zeroline=FALSE)
font<-list(size=12,color='black')
#Plot the cross section by easting and northing data.
plot_ly(data=dischargePointsXS1,x=~DistanceAdj, y=~H, name='Distance vs Elevation', type='scatter', mode='lines+markers', text=~name)%>%
layout(title = siteID, xaxis=xAxisTitle2, yaxis=yAxisTitle2)
#Calculates the bankfull width.
DSCXS1Bankfull<-abs((dischargePointsXS1$DistanceAdj[grepl("RBF",dischargePointsXS1$name)])-(dischargePointsXS1$DistanceAdj[grepl("LBF",dischargePointsXS1$name)]))
#Creates dataframe of staff gauge points.
staffGaugePoints=subset(surveyPtsDF,surveyPtsDF$mapCode=="Gauge")
staffGaugePoints<-staffGaugePoints[order(staffGaugePoints$N),]
rownames(staffGaugePoints)<-seq(length=nrow(staffGaugePoints))
#Set meter mark where the staff gauge was shot in and the name of the staff gauge point:
#Recorded in field data
staffGaugeMeterMark<-0.40
staffGaugeElevation <- staffGaugePoints$H[grepl("SP_0.40",staffGaugePoints$name)]
#Converts discharge XS1 transect point elevations to gauge height (rounded to 2 digits).
dischargePointsXS1$gaugeHeight<-dischargePointsXS1$H - (staffGaugeElevation - staffGaugeMeterMark)
dischargePointsXS1$gaugeHeight<-round(dischargePointsXS1$gaugeHeight,digits=2)
#Assigns a unique to each measurement for plot viewing purposes.
dischargePointsXS1$ID<-c(1:length(dischargePointsXS1$name))
dischargePointsXS1 <- dischargePointsXS1[order(dischargePointsXS1$DistanceAdj),]
#invisible(dev.new(noRStudioGD = TRUE))
#Sets plot3 settings.
xAxisTitle3<-list(title="Distance (m)",zeroline=FALSE, range=c(-5,15))
yAxisTitle3<-list(title="Gauge Height  (m)",zeroline=FALSE)
font<-list(size=12,color='black')
#Plot the cross section by distance and gauge height.  Note whether or not red line is below thalweg.
plot_ly(data=dischargePointsXS1,x=~DistanceAdj, y=~gaugeHeight, name='Distance vs. Gauge Height', type='scatter', mode='markers+lines', text=~name)%>%
add_trace(y= 0,name = 'Gauge Height = 0.00m',mode='lines',line = list(color = 'red', width = 2, dash='dash')) %>%
layout(title = siteID, xaxis=xAxisTitle3, yaxis=yAxisTitle3)
#Calculates gaugeHeight at LB and RB bankfull:
gaugeHeightLBF<-dischargePointsXS1$gaugeHeight[grepl("LBF",dischargePointsXS1$name)]
gaugeHeightRBF<-dischargePointsXS1$gaugeHeight[grepl("RBF",dischargePointsXS1$name)]
#Asseses whether negative stage is present in the discharge cross-section
negativeStage<-any(dischargePointsXS1$gaugeHeight<0)
if(negativeStage==TRUE){
exectpart<-TRUE
}else{exectpart<-FALSE}
#This section will only run if there are negative values in the gauge height column.
if(exectpart){
#Determines the lowest elevation of the discharge cross-section, assumed to be the thalweg.
dischargeXS1THL<-min(dischargePointsXS1$H)
#Calculates the elevation of the 0.00 meter mark of the staff gauge.
staffGaugeZeroElevation<-(staffGaugePoints$H[staffGaugePoints$name=="SP_0.5"])-staffGaugeMeterMark
#Calculates the difference between the staff gauge 0.00m mark elevation and the discharge thalweg elevation.
gaugeZeroQElevDiff<--as.numeric(dischargeXS1THL-staffGaugeZeroElevation)
#Offsets the elevation of the gauge heights by this difference, rounds to two digits.
dischargePointsXS1$gaugeOffsetElevation<-dischargePointsXS1$H + (gaugeZeroQElevDiff)
dischargePointsXS1$gaugeOffsetElevation<-round(dischargePointsXS1$gaugeOffsetElevation,digits=2)
#Offsets the gauge heights by the offset elevation, rounds to two digits.
dischargePointsXS1$gaugeHeightOffset<-dischargePointsXS1$gaugeOffsetElevation - (staffGaugeElevation - staffGaugeMeterMark)
dischargePointsXS1$gaugeHeightOffset<-round(dischargePointsXS1$gaugeHeightOffset,digits=2)
#Plots discharge XS1 transect point distances vs gaugeHeightOffset.  Red line should be at the thalweg.
plot_ly(data=dischargePointsXS1,x=~DistanceAdj, y=~gaugeHeight, name='Distance vs. Gauge Height', type='scatter', mode='markers+lines', text=~name)%>%
add_trace(y= 0,name = 'Gauge Height = 0.00m',mode='lines',line = list(color = 'red', width = 2, dash='dash')) %>%
layout(title = siteID, xaxis=xAxisTitle2, yaxis=yAxisTitle2)
}else{"There are no negative gauge height values in discharge XS1.  There is no need for correction."}
##### Now create the actual controls to upload... #####
# library(neonUtilities)
# #For use with the API functionality
# dataDir <- "API"
# siteID <- "HOPB"
#
# streamMorphoDPID <- "DP4.00131.001"
# dataFromAPI <- zipsByProduct(streamMorphoDPID,site,package="expanded",check.size=FALSE)
# filepath <- "C:/Users/kcawley/Desktop/test/filesToStack00131/"
# stackByTable(filepath=filepath, folder = TRUE)
#Use the new function here once we have the data in the new ECS zip packages
#HOPB processing code
# filepath <- "C:/Users/kcawley/Desktop/test/"
# surveyPtsDF <- read.table(paste0(filepath,"HOPB_surveyPts_20170921.csv"),sep = ",",stringsAsFactors = FALSE, header = TRUE)
# siteID <- "HOPB"
# surveyDate <- "2017-09-21T16:00"
#load packages
require(rgdal)
library(rgdal)
library(plotly)
#NEON Domain number (ex: D01).
domainID<-'D04'
#Four-digit NEON site code (ex: HOPB).
siteID <- 'GUIL'
#The end date of the geomorphology survey (YYYYMMDD).
surveyDate<-'20180129'
#Stipulate 4-digit site code, underscore, and survey year (ex: HOPB_2017).
surveyID <- "GUIL_2018"
#Queues a directory that contains file paths for each site per survey date.
siteDirectory<-read.csv('N:/Science/AQU/Geomorphology_Survey_Data/inputDirectory.csv',head=T,sep=",",stringsAsFactors = F)
#Creates dataframe that contains survey data.
filePath <- siteDirectory$filePath[which(siteDirectory$surveyID==surveyID)]
surveyShapefileName <- siteDirectory$surveyShapefileName[which(siteDirectory$surveyID==surveyID)]
surveyPts <- readOGR(filePath,surveyShapefileName)
surveyPtsDF <- as.data.frame(surveyPts)
#Working directory where files will be output.
wdir<-paste('C:/Users/nharrison/Documents/GitHub/landWaterSoilIPT/streamMorpho/ScienceProcessingCode/R_Metrics',siteID,'Raw_Data',sep="/")
#wdir<-paste('C:/Users/kcawley/Documents/GitHub/landWaterSoilIPT/streamMorpho/ScienceProcessingCode/R_Metrics',siteID,'Raw_Data',sep="/")
#Creates dataframe of all points associated with transect DSC1.
dischargePointsXS1<-subset(surveyPtsDF,mapCode=="Transect_DSC1_New")
dischargePointsXS1<-dischargePointsXS1[order(dischargePointsXS1$N),]
rownames(dischargePointsXS1)<-seq(length=nrow(dischargePointsXS1))
#Sets plot1 settings.
xAxisTitle1<-list(title="Easting (m)",zeroline=FALSE)
yAxisTitle1<-list(title="Northing  (m)",zeroline=FALSE)
font<-list(size=12,color='black')
#Plot the cross section by easting and northing data.
plot_ly(data=dischargePointsXS1,x=~E, y=~N, name='Easting vs Northing', type='scatter', mode='markers', text=~name)%>%
layout(title = siteID, xaxis=xAxisTitle1, yaxis=yAxisTitle1)
#Manually select NorthStart and EastStart coordinates
dischargeXS1NorthStart<-dischargePointsXS1$N[1]
dischargeXS1EastStart<-dischargePointsXS1$E[1]
#Assigns a raw Distance value to each point relative to the NorthStart and EastStart coordinates.
for(i in 1:(length(dischargePointsXS1$name))){
dischargeXS1PointN<-dischargePointsXS1$N[i]
dischargeXS1PointE<-dischargePointsXS1$E[i]
dischargePointsXS1$DistanceRaw[i]<-sqrt(((dischargeXS1PointN-dischargeXS1NorthStart)^2)+((dischargeXS1PointE-dischargeXS1EastStart)^2))
}
#To manually select ReferenceDistance:
dischargeXS1ReferenceDistance<-dischargePointsXS1$DistanceRaw[1]
#Sets Horizontal adjustment value based on reference point coordinate.
dischargeXS1HorizontalAdjust<-0-dischargeXS1ReferenceDistance
#Transforms raw distance to adjusted distance based on reference distance point.
for(i in 1:(length(dischargePointsXS1$name))){
dischargePointsXS1$DistanceAdj[i]<-dischargePointsXS1$DistanceRaw[i]+dischargeXS1HorizontalAdjust
}
#Plot the cross-section again to check reference values and ensure that the profile is being viewed from left to right bank.
#Sets plot2 settings.
xAxisTitle2<-list(title="Distance (m)",zeroline=FALSE)
yAxisTitle2<-list(title="Elevation  (m)",zeroline=FALSE)
font<-list(size=12,color='black')
#Plot the cross section by easting and northing data.
plot_ly(data=dischargePointsXS1,x=~DistanceAdj, y=~H, name='Distance vs Elevation', type='scatter', mode='lines+markers', text=~name)%>%
layout(title = siteID, xaxis=xAxisTitle2, yaxis=yAxisTitle2)
#Calculates the bankfull width.
DSCXS1Bankfull<-abs((dischargePointsXS1$DistanceAdj[grepl("RBF",dischargePointsXS1$name)])-(dischargePointsXS1$DistanceAdj[grepl("LBF",dischargePointsXS1$name)]))
#Creates dataframe of staff gauge points.
staffGaugePoints=subset(surveyPtsDF,surveyPtsDF$mapCode=="Gauge")
staffGaugePoints<-staffGaugePoints[order(staffGaugePoints$N),]
rownames(staffGaugePoints)<-seq(length=nrow(staffGaugePoints))
#Set meter mark where the staff gauge was shot in and the name of the staff gauge point:
#Recorded in field data
staffGaugeMeterMark<-1.05
staffGaugeElevation <- staffGaugePoints$H[grepl("SP_1.05M_TEMP",staffGaugePoints$name)]
#Converts discharge XS1 transect point elevations to gauge height (rounded to 2 digits).
dischargePointsXS1$gaugeHeight<-dischargePointsXS1$H - (staffGaugeElevation - staffGaugeMeterMark)
dischargePointsXS1$gaugeHeight<-round(dischargePointsXS1$gaugeHeight,digits=2)
#Assigns a unique to each measurement for plot viewing purposes.
dischargePointsXS1$ID<-c(1:length(dischargePointsXS1$name))
dischargePointsXS1 <- dischargePointsXS1[order(dischargePointsXS1$DistanceAdj),]
#invisible(dev.new(noRStudioGD = TRUE))
#Sets plot3 settings.
xAxisTitle3<-list(title="Distance (m)",zeroline=FALSE, range=c(-5,15))
yAxisTitle3<-list(title="Gauge Height  (m)",zeroline=FALSE)
font<-list(size=12,color='black')
#Plot the cross section by distance and gauge height.  Note whether or not red line is below thalweg.
plot_ly(data=dischargePointsXS1,x=~DistanceAdj, y=~gaugeHeight, name='Distance vs. Gauge Height', type='scatter', mode='markers+lines', text=~name)%>%
add_trace(y= 0,name = 'Gauge Height = 0.00m',mode='lines',line = list(color = 'red', width = 2, dash='dash')) %>%
layout(title = siteID, xaxis=xAxisTitle3, yaxis=yAxisTitle3)
#Calculates gaugeHeight at LB and RB bankfull:
gaugeHeightLBF<-dischargePointsXS1$gaugeHeight[grepl("LBF",dischargePointsXS1$name)]
gaugeHeightRBF<-dischargePointsXS1$gaugeHeight[grepl("RBF",dischargePointsXS1$name)]
#Asseses whether negative stage is present in the discharge cross-section
negativeStage<-any(dischargePointsXS1$gaugeHeight<0)
if(negativeStage==TRUE){
execpart<-TRUE
}else{exetpart<-FALSE}
#This section will only run if there are negative values in the gauge height column.
if(execpart){
#Determines the lowest elevation of the discharge cross-section, assumed to be the thalweg.
dischargeXS1THL<-min(dischargePointsXS1$H)
#Calculates the elevation of the 0.00 meter mark of the staff gauge.
staffGaugeZeroElevation<-(staffGaugePoints$H[staffGaugePoints$name=="SP_1.05M_TEMP"])-staffGaugeMeterMark
#Calculates the difference between the staff gauge 0.00m mark elevation and the discharge thalweg elevation.
gaugeZeroQElevDiff<--as.numeric(dischargeXS1THL-staffGaugeZeroElevation)
#Offsets the elevation of the gauge heights by this difference, rounds to two digits.
dischargePointsXS1$gaugeOffsetElevation<-dischargePointsXS1$H + (gaugeZeroQElevDiff)
dischargePointsXS1$gaugeOffsetElevation<-round(dischargePointsXS1$gaugeOffsetElevation,digits=2)
#Offsets the gauge heights by the offset elevation, rounds to two digits.
dischargePointsXS1$gaugeHeightOffset<-dischargePointsXS1$gaugeOffsetElevation - (staffGaugeElevation - staffGaugeMeterMark)
dischargePointsXS1$gaugeHeightOffset<-round(dischargePointsXS1$gaugeHeightOffset,digits=2)
#Plots discharge XS1 transect point distances vs gaugeHeightOffset.  Red line should be at the thalweg.
plot_ly(data=dischargePointsXS1,x=~DistanceAdj, y=~gaugeHeight, name='Distance vs. Gauge Height', type='scatter', mode='markers+lines', text=~name)%>%
add_trace(y= 0,name = 'Gauge Height = 0.00m',mode='lines',line = list(color = 'red', width = 2, dash='dash')) %>%
layout(title = siteID, xaxis=xAxisTitle2, yaxis=yAxisTitle2)
}else{"There are no negative gauge height values in discharge XS1.  There is no need for correction."}
