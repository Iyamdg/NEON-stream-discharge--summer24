output$Test <- renderPlot({
plot(data())
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(shinycssloaders)
ui <- fluidPage(
actionButton("plot","plot"),
plotOutput("Test") %>% withSpinner(color="#0dc5c1")
)
server <- function(input, output, session) {
data <- eventReactive(input$plot,{
rnorm(1:100000)
})
output$Test <- renderPlot({
plot(data())
})
}
shinyApp(ui = ui, server = server)
runApp('GitHub/NEON-stream-discharge/L4Discharge/AOSApp/AOS_App.R')
runApp('GitHub/NEON-stream-discharge/L4Discharge/AOSApp/AOS_App.R')
runApp('GitHub/NEON-stream-discharge/L4Discharge/AOSApp/AOS_App.R')
# wrap an output:
addSpinner(shiny::plotOutput("plot"))
# Complete demo:
if (interactive()) {
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Exemple spinners"),
actionButton(inputId = "refresh", label = "Refresh", width = "100%"),
fluidRow(
column(
width = 5, offset = 1,
addSpinner(plotOutput("plot1"), spin = "circle", color = "#E41A1C"),
addSpinner(plotOutput("plot3"), spin = "bounce", color = "#377EB8"),
addSpinner(plotOutput("plot5"), spin = "folding-cube", color = "#4DAF4A"),
addSpinner(plotOutput("plot7"), spin = "rotating-plane", color = "#984EA3"),
addSpinner(plotOutput("plot9"), spin = "cube-grid", color = "#FF7F00")
),
column(
width = 5,
addSpinner(plotOutput("plot2"), spin = "fading-circle", color = "#FFFF33"),
addSpinner(plotOutput("plot4"), spin = "double-bounce", color = "#A65628"),
addSpinner(plotOutput("plot6"), spin = "dots", color = "#F781BF"),
addSpinner(plotOutput("plot8"), spin = "cube", color = "#999999")
)
),
actionButton(inputId = "refresh2", label = "Refresh", width = "100%")
)
server <- function(input, output, session) {
dat <- reactive({
input$refresh
input$refresh2
Sys.sleep(3)
Sys.time()
})
lapply(
X = seq_len(9),
FUN = function(i) {
output[[paste0("plot", i)]] <- renderPlot({
dat()
plot(sin, -pi, i*pi)
})
}
)
}
shinyApp(ui, server)
}
if (interactive()) {
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Exemple spinners"),
actionButton(inputId = "refresh", label = "Refresh", width = "100%"),
fluidRow(
column(
width = 5, offset = 1,
addSpinner(plotOutput("plot1"), spin = "circle", color = "#E41A1C"),
addSpinner(plotOutput("plot3"), spin = "bounce", color = "#377EB8"),
addSpinner(plotOutput("plot5"), spin = "folding-cube", color = "#4DAF4A"),
addSpinner(plotOutput("plot7"), spin = "rotating-plane", color = "#984EA3"),
addSpinner(plotOutput("plot9"), spin = "cube-grid", color = "#FF7F00")
),
column(
width = 5,
addSpinner(plotOutput("plot2"), spin = "fading-circle", color = "#FFFF33"),
addSpinner(plotOutput("plot4"), spin = "double-bounce", color = "#A65628"),
addSpinner(plotOutput("plot6"), spin = "dots", color = "#F781BF"),
addSpinner(plotOutput("plot8"), spin = "cube", color = "#999999")
)
),
actionButton(inputId = "refresh2", label = "Refresh", width = "100%")
)
server <- function(input, output, session) {
dat <- reactive({
input$refresh
input$refresh2
Sys.sleep(3)
Sys.time()
})
lapply(
X = seq_len(9),
FUN = function(i) {
output[[paste0("plot", i)]] <- renderPlot({
dat()
plot(sin, -pi, i*pi)
})
}
)
}
shinyApp(ui, server)
}
# wrap an output:
addSpinner(shiny::plotOutput("plot"))
# Complete demo:
if (interactive()) {
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Exemple spinners"),
actionButton(inputId = "refresh", label = "Refresh", width = "100%"),
fluidRow(
column(
width = 5, offset = 1,
addSpinner(plotOutput("plot1"), spin = "circle", color = "#E41A1C"),
addSpinner(plotOutput("plot3"), spin = "bounce", color = "#377EB8"),
),
column(
width = 5,
addSpinner(plotOutput("plot2"), spin = "fading-circle", color = "#FFFF33"),
)
),
actionButton(inputId = "refresh2", label = "Refresh", width = "100%")
)
server <- function(input, output, session) {
dat <- reactive({
input$refresh
input$refresh2
Sys.sleep(3)
Sys.time()
})
lapply(
X = seq_len(9),
FUN = function(i) {
output[[paste0("plot", i)]] <- renderPlot({
dat()
plot(sin, -pi, i*pi)
})
}
)
}
shinyApp(ui, server)
}
# wrap an output:
addSpinner(shiny::plotOutput("plot"))
# Complete demo:
if (interactive()) {
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Exemple spinners"),
actionButton(inputId = "refresh", label = "Refresh", width = "100%"),
fluidRow(
column(
width = 5, offset = 1,
addSpinner(plotOutput("plot1"), spin = "circle", color = "#E41A1C"),
addSpinner(plotOutput("plot3"), spin = "bounce", color = "#377EB8"),
),
column(
width = 5,
addSpinner(plotOutput("plot2"), spin = "fading-circle", color = "#E41A1C"),
)
),
actionButton(inputId = "refresh2", label = "Refresh", width = "100%")
)
server <- function(input, output, session) {
dat <- reactive({
input$refresh
input$refresh2
Sys.sleep(3)
Sys.time()
})
lapply(
X = seq_len(9),
FUN = function(i) {
output[[paste0("plot", i)]] <- renderPlot({
dat()
plot(sin, -pi, i*pi)
})
}
)
}
shinyApp(ui, server)
}
# wrap an output:
addSpinner(shiny::plotOutput("plot"))
# Complete demo:
if (interactive()) {
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Exemple spinners"),
actionButton(inputId = "refresh", label = "Refresh", width = "100%"),
fluidRow(
column(
width = 5, offset = 1,
addSpinner(plotOutput("plot1"), spin = "circle", color = "#E41A1C"),
addSpinner(plotOutput("plot3"), spin = "bounce", color = "#377EB8"),
),
column(
width = 5,
# addSpinner(plotOutput("plot2"), spin = "fading-circle", color = "#E41A1C"),
)
),
actionButton(inputId = "refresh2", label = "Refresh", width = "100%")
)
server <- function(input, output, session) {
dat <- reactive({
input$refresh
input$refresh2
Sys.sleep(3)
Sys.time()
})
lapply(
X = seq_len(9),
FUN = function(i) {
output[[paste0("plot", i)]] <- renderPlot({
dat()
plot(sin, -pi, i*pi)
})
}
)
}
shinyApp(ui, server)
}
runApp('GitHub/NEON-stream-discharge/L4Discharge/AOSApp/AOS_App.R')
library(shiny)
library(dplyr)
library(shinycssloaders)
library(DT)
ui <- fluidPage(
actionButton("plot","plot"),
withSpinner(dataTableOutput("Test"),color="black")
)
server <- function(input, output, session) {
observeEvent(input$plot, {
output$Test <- DT::renderDT(DT::datatable(head(iris),
rownames = FALSE, options = list(dom = 't',
ordering=FALSE)))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(shinycssloaders)
library(DT)
ui <- fluidPage(
actionButton("plot","plot"),
withSpinner(dataTableOutput("Test"),color="black")
)
server <- function(input, output, session) {
observeEvent(input$plot, {
output$Test <- DT::renderDT(DT::datatable(head(iris),
rownames = FALSE, options = list(dom = 't',
ordering=FALSE)))
})
}
shinyApp(ui = ui, server = server)
library(shiny); runApp('GitHub/NEON-stream-discharge/L4Discharge/AOSApp/AOS_App.R')
library(shiny); runApp('AOS_App.R')
# NOT RUN {
# wrap an output:
addSpinner(shiny::plotOutput("plot"))
# Complete demo:
if (interactive()) {
library(shiny)
library(shinyWidgets)
ui <- fluidPage(
tags$h2("Exemple spinners"),
actionButton(inputId = "refresh", label = "Refresh", width = "100%"),
fluidRow(
column(
width = 5, offset = 1,
addSpinner(plotOutput("plot1"), spin = "circle", color = "#E41A1C"),
addSpinner(plotOutput("plot3"), spin = "bounce", color = "#377EB8"),
addSpinner(plotOutput("plot5"), spin = "folding-cube", color = "#4DAF4A"),
addSpinner(plotOutput("plot7"), spin = "rotating-plane", color = "#984EA3"),
addSpinner(plotOutput("plot9"), spin = "cube-grid", color = "#FF7F00")
),
column(
width = 5,
addSpinner(plotOutput("plot2"), spin = "fading-circle", color = "#FFFF33"),
addSpinner(plotOutput("plot4"), spin = "double-bounce", color = "#A65628"),
addSpinner(plotOutput("plot6"), spin = "dots", color = "#F781BF"),
addSpinner(plotOutput("plot8"), spin = "cube", color = "#999999")
)
),
actionButton(inputId = "refresh2", label = "Refresh", width = "100%")
)
server <- function(input, output, session) {
dat <- reactive({
input$refresh
input$refresh2
Sys.sleep(3)
Sys.time()
})
lapply(
X = seq_len(9),
FUN = function(i) {
output[[paste0("plot", i)]] <- renderPlot({
dat()
plot(sin, -pi, i*pi)
})
}
)
}
shinyApp(ui, server)
}
# }
# NOT RUN {
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
actionButton("go", "Go"),
withSpinner(plotOutput("plot"))
),
server = function(input, output) {
output$plot <- renderPlot({
input$go
Sys.sleep(1.5)
plot(runif(10))
})
}
)
}
# NOT RUN {
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
actionButton("go", "Go"),
withSpinner(plotOutput("plot"))
),
server = function(input, output) {
output$plot <- renderPlot({
input$go
Sys.sleep(1.5)
plot(runif(10))
})
}
)
}
# NOT RUN {
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
actionButton("go", "Go"),
shinycssloaders::withSpinner(plotOutput("plot"))
),
server = function(input, output) {
output$plot <- renderPlot({
input$go
Sys.sleep(1.5)
plot(runif(10))
})
}
)
}
install.packages("shinycssloaders")
# NOT RUN {
if (interactive()) {
library(shiny)
library("shinycssloaders")
shinyApp(
ui = fluidPage(
actionButton("go", "Go"),
shinycssloaders::withSpinner(plotOutput("plot"))
),
server = function(input, output) {
output$plot <- renderPlot({
input$go
Sys.sleep(1.5)
plot(runif(10))
})
}
)
}
# NOT RUN {
if (interactive()) {
library(shiny)
library("shinycssloaders")
shinyApp(
ui = fluidPage(
actionButton("go", "Go"),
shinycssloaders::withSpinner(plotOutput("plot"), hide.ui = TRUE)
),
server = function(input, output) {
output$plot <- renderPlot({
input$go
Sys.sleep(1.5)
plot(runif(10))
})
}
)
}
# NOT RUN {
if (interactive()) {
library(shiny)
library("shinycssloaders")
shinyApp(
ui = fluidPage(
actionButton("go", "Go"),
shinycssloaders::withSpinner(plotOutput("plot"), hide.ui = FALSE)
),
server = function(input, output) {
output$plot <- renderPlot({
input$go
Sys.sleep(1.5)
plot(runif(10))
})
}
)
}
# NOT RUN {
if (interactive()) {
library(shiny)
library("shinycssloaders")
shinyApp(
ui = fluidPage(
actionButton("go", "Go"),
hidden(div(id = 'test',withSpinner(plotOutput("plot"), hide.ui = FALSE))
),
server = function(input, output) {
toggle(id = 'text', condition = FALSE)
output$plot <- renderPlot({
toggle(id = 'text', condition = TRUE)
Sys.sleep(1)
input$go
Sys.sleep(1.5)
plot(runif(10))
})
}
)
}
# NOT RUN {
if (interactive()) {
library(shiny)
library("shinycssloaders")
shinyApp(
ui = fluidPage(
actionButton("go", "Go"),
hidden(div(id = 'test',withSpinner(plotOutput("plot"), hide.ui = FALSE)))
),
server = function(input, output) {
toggle(id = 'text', condition = FALSE)
output$plot <- renderPlot({
toggle(id = 'text', condition = TRUE)
Sys.sleep(1)
input$go
Sys.sleep(1.5)
plot(runif(10))
})
}
)
}
shinyApp(
ui = fluidPage(
actionButton("go", "Go"),
hidden(div(id = 'test',withSpinner(plotOutput("plot"), hide.ui = FALSE)))
),
server = function(input, output) {
toggle(id = 'text', condition = FALSE)
output$plot <- renderPlot({
toggle(id = 'text', condition = TRUE)
Sys.sleep(1)
input$go
Sys.sleep(1.5)
plot(runif(10))
})
}
)
install.packages("shinyjs")
#install.packages("shinyjs")
library(shinyjs)
# NOT RUN {
if (interactive()) {
library(shiny)
library("shinycssloaders")
shinyApp(
ui = fluidPage(
actionButton("go", "Go"),
hidden(div(id = 'test',withSpinner(plotOutput("plot"), hide.ui = FALSE)))
),
server = function(input, output) {
toggle(id = 'text', condition = FALSE)
output$plot <- renderPlot({
toggle(id = 'text', condition = TRUE)
Sys.sleep(1)
input$go
Sys.sleep(1.5)
plot(runif(10))
})
}
)
}
library(shiny); runApp('AOS_App.R')
runApp('AOS_App.R')
