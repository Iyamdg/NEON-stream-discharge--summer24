dpID="DP4.00133.001",
token = Sys.getenv("NEON_PAT"),
package = "basic",
check.size = F,
site = site,
startdate = searchIntervalStartDate,
enddate = searchIntervalEndDate
)
#extract date and site in gaugeDischargeMeas from DP4.00133.001
sdrc_gaugeDischargeMeas <- DP4.00133.001$sdrc_gaugeDischargeMeas%>%
separate(gaugeEventID,c("site","date"),5,remove = F)%>%
mutate(date=paste0(as.Date(date,format="%Y%m%d")," 20:00:00"))
#extract continuous discharge data and gauge-pressure relationship data from DP4.00130.001
csd_continuousDischarge <- DP4.00130.001$csd_continuousDischarge
sdrc_gaugePressureRelationship <- DP4.00130.001$sdrc_gaugePressureRelationship
# rounding endDate to the nearest 20 minute minute
csd_continuousDischarge$roundDate <- lubridate::round_date(csd_continuousDischarge$endDate, "20 mins")
sdrc_gaugePressureRelationship$newDate <- lubridate::round_date(sdrc_gaugePressureRelationship$endDate, "20 mins")
#creating summary table for variables and  uncertainties to be included
continuousDischarge_sum <- csd_continuousDischarge%>%
group_by(roundDate)%>%
summarize(meanQ=mean(maxpostDischarge,na.rm = T),
meanH=mean(equivalentStage,na.rm = T),
meanHUnc=mean(stageUnc,na.rm = T),
meanURemnUnc=mean(withRemnUncQUpper2Std,na.rm = T),
meanLRemnUnc=mean(withRemnUncQLower2Std,na.rm = T),
meanUParaUnc=mean(withParaUncQUpper2Std,na.rm = T),
meanLParaUnc=mean(withParaUncQLower2Std,na.rm = T))%>%
mutate(meanLHUnc=meanH-meanHUnc,
meanUHUnc=meanH+meanHUnc)
sdrc_gaugeDischargeMeas$date <- as.POSIXct(sdrc_gaugeDischargeMeas$date)
continuousDischarge_sum$roundDate <- as.POSIXct(continuousDischarge_sum$roundDate)
sdrc_gaugePressureRelationship$newDate <- as.POSIXct(sdrc_gaugePressureRelationship$newDate)
#changing var name guageHeight of guagePressureRelationship
sdrc_gaugePressureRelationship$guage_Height <- sdrc_gaugePressureRelationship$gaugeHeight
sdrc_gaugePressureRelationship <- sdrc_gaugePressureRelationship %>%
select(guage_Height, newDate)
#joining gauge discharge vars to continuous summary table
continuousDischarge_sum <- full_join(continuousDischarge_sum, sdrc_gaugeDischargeMeas, by = c("roundDate" = "date")) %>%
select(roundDate, meanH, meanQ, meanHUnc, meanURemnUnc,meanLRemnUnc,
meanUParaUnc,meanLParaUnc,meanLHUnc,meanUHUnc, gaugeHeight,streamDischarge)
#joining guagepressure to  continuoussummary table
continuousDischarge_sum <- full_join(continuousDischarge_sum, sdrc_gaugePressureRelationship, by =c("roundDate" = "newDate"))
#plotting with uncertainty
plott <- plot_ly(data=continuousDischarge_sum)%>%
# Q Uncertainty
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~meanURemnUnc,name="Q: Remn Unc Top",type='scatter',mode='line',line=list(color='red'),showlegend=T,legendgroup='group1')%>%
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~meanLRemnUnc,name="Q: Remn Unc Bottom",type='scatter',mode='none',fill = 'tonexty',fillcolor = 'red',showlegend=T,legendgroup='group1')%>%
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~meanUParaUnc,name="Q: Para Unc Top",type='scatter',mode='line',line=list(color='lightpink'),showlegend=T,legendgroup='group1')%>%
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~meanLParaUnc,name="Q: Para Unc Bottom",type='scatter',mode='none',fill = 'tonexty',fillcolor = 'lightpink',showlegend=T,legendgroup='group1')%>%
# H Uncertainty
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~meanUHUnc,name="H: Unc Top",type='scatter',mode='line',line=list(color='lightgreen'),yaxis='y2',showlegend=T,legendgroup='group2')%>%
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~meanLHUnc,name="H: Unc Bottom",type='scatter',mode='none',fill = 'tonexty',fillcolor = 'lightgreen',yaxis='y2',showlegend=T,legendgroup='group2')%>%
# H and Q Series
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~meanQ, name="Q: Flow Series",type='scatter',mode='lines',line = list(color = 'black'),showlegend=T,legendgroup='group3')%>%
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~meanH, name="H: Stage Series",type='scatter',mode='lines',line = list(color = 'green'),yaxis='y2',showlegend=T,legendgroup='group4')%>%
# Empirical H and Q
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~streamDischarge,name="Q: Measured", type='scatter', mode='markers',marker = list(color = 'blue',size=8,line = list(color = "black",width = 1)),showlegend=T,legendgroup='group5')%>%
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~guage_Height,name='H: Measured (RC)',type='scatter',mode='markers',yaxis='y2',marker=list(color="purple",size=8,line = list(color = "black",width = 1)),showlegend=T,legendgroup='group6')%>%
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~guage_Height,name='H: Measured Guage Pressure',type='scatter',mode='markers',yaxis='y2',marker=list(color="orange",size=8,line = list(color = "black",width = 1)),showlegend=T,legendgroup='group6')%>%
layout(title = paste0(site," -- Continuous Discharge Time Series"),
xaxis=list(tick=14,title="dateTime"),
yaxis=list(side='left',
title='Discharge (lps)',
showgrid=FALSE,
zeroline=FALSE),
yaxis2=list(side='right',
overlaying="y",
title='Stage (m)',
showgrid=FALSE,
zeroline=FALSE),
#------
updatemenus=list(
list(
type='buttons',
buttons=list(
list(label='linear',
method='relayout',
args=list(list(yaxis=list(type='linear')))),
list(label='log',
method='relayout',
args=list(list(yaxis=list(type='log')))))))
)#end of layout
#create an html plot
htmlwidgets::saveWidget(as_widget(plott),paste0(site,"_continuousQ_allWYs.html"))
# Load packages and set options
library(stageQCurve)
library(tidyverse)
library(neonUtilities)
library(htmlwidgets)
library(plotly)
library(tidyverse)
library(dplyr)
devtools::install_github(repo = "NEONScience/NEON-stream-discharge/L4Discharge/stageQCurve", force = TRUE)
# Set input variables
site <- "HOPB"
startDate <-  "2018-10-01"
endDate <- "2019-09-30"
# Rating curve data queries need to span an entire water year to ensure we are getting all the appropriate data
searchIntervalStartDate <- as.character(stageQCurve::def.calc.WY.strt.end.date(searchIntervalStartDate = startDate)$startDate)
searchIntervalEndDate <- as.character(stageQCurve::def.calc.WY.strt.end.date(searchIntervalStartDate = endDate)$endDate)
# Get continuous discharge data from the NEON API
DP4.00130.001 <- neonUtilities::loadByProduct(
dpID="DP4.00130.001",
token = Sys.getenv("NEON_PAT"),
package = "expanded",
check.size = F,
site = site,
startdate = searchIntervalStartDate,
enddate = searchIntervalEndDate
)
# Get rating curve data from the NEON API
DP4.00133.001 <- neonUtilities::loadByProduct(
dpID="DP4.00133.001",
token = Sys.getenv("NEON_PAT"),
package = "basic",
check.size = F,
site = site,
startdate = searchIntervalStartDate,
enddate = searchIntervalEndDate
)
#extract date and site in gaugeDischargeMeas from DP4.00133.001
sdrc_gaugeDischargeMeas <- DP4.00133.001$sdrc_gaugeDischargeMeas%>%
separate(gaugeEventID,c("site","date"),5,remove = F)%>%
mutate(date=paste0(as.Date(date,format="%Y%m%d")," 20:00:00"))
#extract continuous discharge data and gauge-pressure relationship data from DP4.00130.001
csd_continuousDischarge <- DP4.00130.001$csd_continuousDischarge
sdrc_gaugePressureRelationship <- DP4.00130.001$sdrc_gaugePressureRelationship
# rounding endDate to the nearest 20 minute minute
csd_continuousDischarge$roundDate <- lubridate::round_date(csd_continuousDischarge$endDate, "20 mins")
sdrc_gaugePressureRelationship$newDate <- lubridate::round_date(sdrc_gaugePressureRelationship$endDate, "20 mins")
#creating summary table for variables and  uncertainties to be included
continuousDischarge_sum <- csd_continuousDischarge%>%
group_by(roundDate)%>%
summarize(meanQ=mean(maxpostDischarge,na.rm = T),
meanH=mean(equivalentStage,na.rm = T),
meanHUnc=mean(stageUnc,na.rm = T),
meanURemnUnc=mean(withRemnUncQUpper2Std,na.rm = T),
meanLRemnUnc=mean(withRemnUncQLower2Std,na.rm = T),
meanUParaUnc=mean(withParaUncQUpper2Std,na.rm = T),
meanLParaUnc=mean(withParaUncQLower2Std,na.rm = T))%>%
mutate(meanLHUnc=meanH-meanHUnc,
meanUHUnc=meanH+meanHUnc)
sdrc_gaugeDischargeMeas$date <- as.POSIXct(sdrc_gaugeDischargeMeas$date)
continuousDischarge_sum$roundDate <- as.POSIXct(continuousDischarge_sum$roundDate)
sdrc_gaugePressureRelationship$newDate <- as.POSIXct(sdrc_gaugePressureRelationship$newDate)
#changing var name guageHeight of guagePressureRelationship
sdrc_gaugePressureRelationship$guage_Height <- sdrc_gaugePressureRelationship$gaugeHeight
sdrc_gaugePressureRelationship <- sdrc_gaugePressureRelationship %>%
select(guage_Height, newDate)
#joining gauge discharge vars to continuous summary table
continuousDischarge_sum <- full_join(continuousDischarge_sum, sdrc_gaugeDischargeMeas, by = c("roundDate" = "date")) %>%
select(roundDate, meanH, meanQ, meanHUnc, meanURemnUnc,meanLRemnUnc,
meanUParaUnc,meanLParaUnc,meanLHUnc,meanUHUnc, gaugeHeight,streamDischarge)
#joining guagepressure to  continuoussummary table
continuousDischarge_sum <- full_join(continuousDischarge_sum, sdrc_gaugePressureRelationship, by =c("roundDate" = "newDate"))
#plotting with uncertainty
plott <- plot_ly(data=continuousDischarge_sum)%>%
# Q Uncertainty
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~meanURemnUnc,name="Q: Remn Unc Top",type='scatter',mode='line',line=list(color='red'),showlegend=T,legendgroup='group1')%>%
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~meanLRemnUnc,name="Q: Remn Unc Bottom",type='scatter',mode='none',fill = 'tonexty',fillcolor = 'red',showlegend=T,legendgroup='group1')%>%
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~meanUParaUnc,name="Q: Para Unc Top",type='scatter',mode='line',line=list(color='lightpink'),showlegend=T,legendgroup='group1')%>%
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~meanLParaUnc,name="Q: Para Unc Bottom",type='scatter',mode='none',fill = 'tonexty',fillcolor = 'lightpink',showlegend=T,legendgroup='group1')%>%
# H Uncertainty
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~meanUHUnc,name="H: Unc Top",type='scatter',mode='line',line=list(color='lightgreen'),yaxis='y2',showlegend=T,legendgroup='group2')%>%
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~meanLHUnc,name="H: Unc Bottom",type='scatter',mode='none',fill = 'tonexty',fillcolor = 'lightgreen',yaxis='y2',showlegend=T,legendgroup='group2')%>%
# H and Q Series
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~meanQ, name="Q: Flow Series",type='scatter',mode='lines',line = list(color = 'black'),showlegend=T,legendgroup='group3')%>%
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~meanH, name="H: Stage Series",type='scatter',mode='lines',line = list(color = 'green'),yaxis='y2',showlegend=T,legendgroup='group4')%>%
# Empirical H and Q
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~streamDischarge,name="Q: Measured", type='scatter', mode='markers',marker = list(color = 'blue',size=8,line = list(color = "black",width = 1)),showlegend=T,legendgroup='group5')%>%
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~guage_Height,name='H: Measured (RC)',type='scatter',mode='markers',yaxis='y2',marker=list(color="purple",size=8,line = list(color = "black",width = 1)),showlegend=T,legendgroup='group6')%>%
add_trace(x=~as.POSIXct(roundDate,format="%Y-%m-%d %H:%M:%S"),y=~guage_Height,name='H: Measured Guage Pressure',type='scatter',mode='markers',yaxis='y2',marker=list(color="orange",size=8,line = list(color = "black",width = 1)),showlegend=T,legendgroup='group6')%>%
layout(title = paste0(site," -- Continuous Discharge Time Series"),
xaxis=list(tick=14,title="dateTime"),
yaxis=list(side='left',
title='Discharge (lps)',
showgrid=FALSE,
zeroline=FALSE),
yaxis2=list(side='right',
overlaying="y",
title='Stage (m)',
showgrid=FALSE,
zeroline=FALSE),
#------
updatemenus=list(
list(
type='buttons',
buttons=list(
list(label='linear',
method='relayout',
args=list(list(yaxis=list(type='linear')))),
list(label='log',
method='relayout',
args=list(list(yaxis=list(type='log')))))))
)#end of layout
#create an html plot
htmlwidgets::saveWidget(as_widget(plott),paste0(site,"_continuousQ_allWYs.html"))
library(shiny)
ui <- fluidPage(sidebarPanel(
numericInput("obs1", value = 2, min = 1, max = 4, label = "n1"),
numericInput("obs2", value = 2, min = 1, max = 4, label = "n2")
),
mainPanel(
tableOutput("obs")
)
)
server <- function(input, output) {
output$obs <- renderTable({
number1 <- input$obs1
number2 <- input$obs2
N_metrics <- matrix(c(27432, 1715997, number1, number2), ncol = 2)
colnames(N_metrics) <- c("A", "B")
row.names(N_metrics) <- c ("observation1", "observation2")
N_metrics
}, rownames = TRUE)
}
shinyApp(ui, server)
runApp('GitHub/NEON-stream-discharge/L4Discharge/AOSApp/AOS_App.R')
runApp('GitHub/NEON-stream-discharge/L4Discharge/AOSApp/AOS_App.R')
runApp('GitHub/NEON-stream-discharge/L4Discharge/AOSApp/AOS_App.R')
runApp('GitHub/NEON-stream-discharge/L4Discharge/AOSApp/AOS_App.R')
runApp('AOS_App.R')
runApp('GitHub/NEON-stream-discharge/L4Discharge/AOSApp/AOS_App.R')
View(server)
runApp('GitHub/NEON-stream-discharge/L4Discharge/AOSApp/AOS_App.R')
runApp('AOS_App.R')
runApp('GitHub/NEON-stream-discharge/L4Discharge/AOSApp/AOS_App.R')
runApp('GitHub/NEON-stream-discharge/L4Discharge/AOSApp/AOS_App.R')
library(shiny); runApp('AOS_App.R')
output$siteInfo <- renderText( paste("Site ", input$siteId, "\n", siteDesc$siteDescription[1],sep=" "))
# Manually set input variables for local testing
input <- list()
input$siteId <- "CARI"
input$dateRange[[1]] <- "2019-01-01"
input$dateRange[[2]] <- "2019-12-31"
if (stringr::str_detect(input$siteId,"TOOK")) {
site <- "TOOK"
}else{
site <- input$siteId
}
startDate <- format(input$dateRange[1])
endDate <- format(input$dateRange[2])
# Rating curve data queries need to span an entire water year to ensure we are getting all the appropriate data
searchIntervalStartDate <- as.character(stageQCurve::def.calc.WY.strt.end.date(searchIntervalStartDate = startDate)$startDate)
searchIntervalEndDate <- as.character(stageQCurve::def.calc.WY.strt.end.date(searchIntervalStartDate = endDate)$endDate)
# Get continuous discharge data from the NEON API
DP4.00130.001 <- neonUtilities::loadByProduct(
dpID="DP4.00130.001",
package = "expanded",
check.size = F,
site = site,
startdate = format(as.POSIXct(startDate),"%Y-%m"),
enddate = format(as.POSIXct(endDate),"%Y-%m")
)
# Get rating curve data from the NEON API
DP4.00133.001 <- neonUtilities::loadByProduct(
dpID="DP4.00133.001",
package = "basic",
check.size = F,
site = site,
startdate = searchIntervalStartDate,
enddate = searchIntervalEndDate
)
# Format gauge-discharge measurement data
sdrc_gaugeDischargeMeas <- DP4.00133.001$sdrc_gaugeDischargeMeas
if (input$siteId=="TOOK_inlet") {
sdrc_gaugeDischargeMeas <- sdrc_gaugeDischargeMeas%>%
dplyr::filter(stringr::str_detect(curveID,"TKIN"))
}else{
if(input$siteId=="TOOK_outlet"){
sdrc_gaugeDischargeMeas <- sdrc_gaugeDischargeMeas%>%
dplyr::filter(stringr::str_detect(curveID,"TKOT"))
}
}
sdrc_gaugeDischargeMeas <- sdrc_gaugeDischargeMeas%>%
tidyr::separate(gaugeEventID,c("site","date"),5,remove = F)%>%
dplyr::mutate(date=paste0(as.Date(date,format="%Y%m%d")," 20:00:00"))%>%
dplyr::select(date,gaugeHeight,streamDischarge)
sdrc_gaugeDischargeMeas$date <- as.character(sdrc_gaugeDischargeMeas$date)
# Format continuous discharge data
csd_continuousDischarge <- DP4.00130.001$csd_continuousDischarge
csd_continuousDischarge$date <- lubridate::round_date(csd_continuousDischarge$endDate, "20 mins")
if (input$siteId=="TOOK_inlet") {
csd_continuousDischarge <- csd_continuousDischarge%>%
dplyr::filter(stringr::str_detect(curveID,"TKIN"))
}else{
if(input$siteId=="TOOK_outlet"){
csd_continuousDischarge <- csd_continuousDischarge%>%
dplyr::filter(stringr::str_detect(curveID,"TKOT"))
}
}
# Format gauge-pressure relationship data
sdrc_gaugePressureRelationship <- DP4.00130.001$sdrc_gaugePressureRelationship
if(!is.null(sdrc_gaugePressureRelationship)){
if (input$siteId=="TOOK_inlet") {
sdrc_gaugePressureRelationship <- sdrc_gaugePressureRelationship%>%
dplyr::filter(stringr::str_detect(regressionID,"TKIN"))
}else{
if(input$siteId=="TOOK_outlet"){
sdrc_gaugePressureRelationship <- sdrc_gaugePressureRelationship%>%
dplyr::filter(stringr::str_detect(regressionID,"TKOT"))
}
}
sdrc_gaugePressureRelationship$date <- paste0(as.Date(sdrc_gaugePressureRelationship$gaugeCollectDate)," 20:00:00")
sdrc_gaugePressureRelationship$date <- as.character(sdrc_gaugePressureRelationship$date)
sdrc_gaugePressureRelationship$gauge_Height <- sdrc_gaugePressureRelationship$gaugeHeight
sdrc_gaugePressureRelationship <- sdrc_gaugePressureRelationship%>%
dplyr::select(gauge_Height, date)
}
#creating summary table for variables and  uncertainties to be included
continuousDischarge_sum <- csd_continuousDischarge%>%
dplyr::group_by(date)%>%
dplyr::summarize(meanQ=mean(maxpostDischarge,na.rm = T),
meanH=mean(equivalentStage,na.rm = T),
meanHUnc=mean(stageUnc,na.rm = T),
meanURemnUnc=mean(withRemnUncQUpper2Std,na.rm = T),
meanLRemnUnc=mean(withRemnUncQLower2Std,na.rm = T),
meanUParaUnc=mean(withParaUncQUpper2Std,na.rm = T),
meanLParaUnc=mean(withParaUncQLower2Std,na.rm = T),
dischargeFinalQF=sum(dischargeFinalQF,na.rm = T),
dischargeFinalQFSciRvw=sum(dischargeFinalQFSciRvw,na.rm = T))%>%
dplyr::mutate(meanLHUnc=meanH-meanHUnc,
meanUHUnc=meanH+meanHUnc)
continuousDischarge_sum$date <- as.character(continuousDischarge_sum$date)
# Mutate the QF fields for plotting
continuousDischarge_sum$dischargeFinalQF[continuousDischarge_sum$dischargeFinalQF==0] <- 0
continuousDischarge_sum$dischargeFinalQF[continuousDischarge_sum$dischargeFinalQF>0] <- max(continuousDischarge_sum$meanURemnUnc,na.rm = T)
continuousDischarge_sum$dischargeFinalQFSciRvw[continuousDischarge_sum$dischargeFinalQFSciRvw==0] <- 0
continuousDischarge_sum$dischargeFinalQFSciRvw[continuousDischarge_sum$dischargeFinalQFSciRvw>0] <- max(continuousDischarge_sum$meanURemnUnc,na.rm = T)
#joining gauge discharge vars to continuous summary table
continuousDischarge_sum <- full_join(continuousDischarge_sum, sdrc_gaugeDischargeMeas, by="date")
#joining guagepressure to  continuoussummary table
if(!is.null(sdrc_gaugePressureRelationship)){
continuousDischarge_sum <- dplyr::full_join(continuousDischarge_sum, sdrc_gaugePressureRelationship, by="date")
}else{
continuousDischarge_sum$gauge_Height <- NA
}
# Subset the summary data frame to only those records in the selected date range
continuousDischarge_sum <- continuousDischarge_sum%>%
dplyr::filter(date>=startDate&date<=endDate)
return(continuousDischarge_sum)
# Subset the summary data frame to only those records in the selected date range
continuousDischarge_sum <- continuousDischarge_sum%>%
dplyr::filter(date>=startDate&date<=endDate)
output$plott <- renderPlotly({
continuousDischarge_sum <- getPackage()
method <- plot_ly(data=continuousDischarge_sum)%>%
layout(
xaxis=list(tick=14,
automargin=T,
title="Date",
tickfont=list(size=16),
titlefont=list(size=18),
# range=c(startDate,endDate)),
range=c(format(input$dateRange[1]),format(input$dateRange[2]))),
yaxis=list(side='left',
automargin=T,
title='Discharge (liters per second)',
tickfont=list(size=16),
titlefont=list(size=18),
showgrid=FALSE,
zeroline=FALSE),
yaxis2=list(side='right',
overlaying="y",
automargin=T,
title="Stage (meter)",
tickfont=list(size=16),
titlefont=list(size=18),
showgrid=FALSE,
zeroline=FALSE),
legend=list(orientation="h",
x=0.5,y=1,
xanchor="center",
font=list(size=14)),
updatemenus=list(
list(
type='buttons',
buttons=list(
list(label='Scale Discharge\n- Linear -',
method='relayout',
args=list(list(yaxis=list(type='linear',title='Discharge (liters per second)',titlefont=list(size=18))))),
list(label='Scale Discharge\n- Log -',
method='relayout',
args=list(list(yaxis=list(type='log',title='Discharge (liters per second) - log',titlefont=list(size=18)))))))))
method <- plot_ly(data=continuousDischarge_sum)%>%
method <- plot_ly(data=continuousDischarge_sum)%>%
layout(
xaxis=list(tick=14,
automargin=T,
title="Date",
tickfont=list(size=16),
titlefont=list(size=18),
# range=c(startDate,endDate)),
range=c(format(input$dateRange[1]),format(input$dateRange[2]))),
yaxis=list(side='left',
automargin=T,
title='Discharge (liters per second)',
tickfont=list(size=16),
titlefont=list(size=18),
showgrid=FALSE,
zeroline=FALSE),
yaxis2=list(side='right',
overlaying="y",
automargin=T,
title="Stage (meter)",
tickfont=list(size=16),
titlefont=list(size=18),
showgrid=FALSE,
zeroline=FALSE),
legend=list(orientation="h",
x=0.5,y=1,
xanchor="center",
font=list(size=14)),
updatemenus=list(
list(
type='buttons',
buttons=list(
list(label='Scale Discharge\n- Linear -',
method='relayout',
args=list(list(yaxis=list(type='linear',title='Discharge (liters per second)',titlefont=list(size=18))))),
list(label='Scale Discharge\n- Log -',
method='relayout',
args=list(list(yaxis=list(type='log',title='Discharge (liters per second) - log',titlefont=list(size=18)))))))))
method <- plot_ly(data=continuousDischarge_sum)%>%
layout(
xaxis=list(tick=14,
automargin=T,
title="Date",
tickfont=list(size=16),
titlefont=list(size=18),
# range=c(startDate,endDate)),
range=c(format(input$dateRange[1]),format(input$dateRange[2]))),
yaxis=list(side='left',
automargin=T,
title='Discharge (liters per second)',
tickfont=list(size=16),
titlefont=list(size=18),
showgrid=FALSE,
zeroline=FALSE),
yaxis2=list(side='right',
overlaying="y",
automargin=T,
title="Stage (meter)",
tickfont=list(size=16),
titlefont=list(size=18),
showgrid=FALSE,
zeroline=FALSE),
legend=list(orientation="h",
x=0.5,y=1,
xanchor="center",
font=list(size=14)),
updatemenus=list(
list(
type='buttons',
buttons=list(
list(label='Scale Discharge\n- Linear -',
method='relayout',
args=list(list(yaxis=list(type='linear',title='Discharge (liters per second)',titlefont=list(size=18))))),
list(label='Scale Discharge\n- Log -',
method='relayout',
args=list(list(yaxis=list(type='log',title='Discharge (liters per second) - log',titlefont=list(size=18)))))))))
#Quality flags
if(input$qctrFlag == TRUE){
method <- method %>%
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~dischargeFinalQF,name="Discharge QF",type='scatter',mode='line',fill = 'tozeroy',showLegend= F, hoverinfo="none", fillcolor = 'pink')
}
if(input$qctrFlagScRv == TRUE){
method <- method %>%
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~dischargeFinalQFSciRvw,name="Discharge QF Science Rvw",type='scatter',mode='line',fill = 'tozeroy',hoverinfo="none", showLegend= F, fillcolor = 'gray')
}
method <- method %>%
#base case
# Q Uncertainty
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~meanURemnUnc,name="Discharge Remnant\nUncertainty",type='scatter',mode='line',line=list(color='red'),showlegend=F,legendgroup='group1')%>%
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~meanLRemnUnc,name="Discharge Remnant\nUncertainty",type='scatter',mode='none',fill = 'tonexty',fillcolor = 'red',showlegend=T,legendgroup='group1')%>%
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~meanUParaUnc,name="Discharge Parametric\nUncertainty",type='scatter',mode='line',line=list(color='lightpink'),showlegend=F,legendgroup='group2')%>%
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~meanLParaUnc,name="Discharge Parametric\nUncertainty",type='scatter',mode='none',fill = 'tonexty',fillcolor = 'lightpink',showlegend=T,legendgroup='group2')%>%
# H Uncertainty
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~meanUHUnc,name="Stage\nUncertainty",type='scatter',mode='line',line=list(color='lightgreen'),yaxis='y2',showlegend=F,legendgroup='group3')%>%
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~meanLHUnc,name="Stage\nUncertainty",type='scatter',mode='none',fill = 'tonexty',fillcolor = 'lightgreen',yaxis='y2',showlegend=T,legendgroup='group3')%>%
# H and Q Series
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~meanQ, name="Continuous\nDischarge",type='scatter',mode='lines',line = list(color = 'black'),showlegend=T,legendgroup='group4')%>%
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~meanH, name="Continuous\nStage",type='scatter',mode='lines',line = list(color = 'green'),yaxis='y2',showlegend=T,legendgroup='group5')%>%
# Empirical H and Q
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~streamDischarge,name="Measured\nDischarge", type='scatter', mode='markers',marker = list(color = 'blue',size=8,line = list(color = "black",width = 1)),showlegend=,legendgroup='group6')%>%
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~gaugeHeight,name='Measured\nGauge Height',type='scatter',mode='markers',yaxis='y2',marker=list(color="purple",size=8,line = list(color = "black",width = 1)),showlegend=F,legendgroup='group7')%>%
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~gauge_Height,name='Measured\nGauge Height',type='scatter',mode='markers',yaxis='y2',marker=list(color="purple",size=8,line = list(color = "black",width = 1)),showlegend=T,legendgroup='group7')
traceback()
method <- method %>%
#base case
# Q Uncertainty
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~meanURemnUnc,name="Discharge Remnant\nUncertainty",type='scatter',mode='line',line=list(color='red'),showlegend=F,legendgroup='group1')%>%
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~meanLRemnUnc,name="Discharge Remnant\nUncertainty",type='scatter',mode='none',fill = 'tonexty',fillcolor = 'red',showlegend=T,legendgroup='group1')%>%
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~meanUParaUnc,name="Discharge Parametric\nUncertainty",type='scatter',mode='line',line=list(color='lightpink'),showlegend=F,legendgroup='group2')%>%
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~meanLParaUnc,name="Discharge Parametric\nUncertainty",type='scatter',mode='none',fill = 'tonexty',fillcolor = 'lightpink',showlegend=T,legendgroup='group2')%>%
# H Uncertainty
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~meanUHUnc,name="Stage\nUncertainty",type='scatter',mode='line',line=list(color='lightgreen'),yaxis='y2',showlegend=F,legendgroup='group3')%>%
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~meanLHUnc,name="Stage\nUncertainty",type='scatter',mode='none',fill = 'tonexty',fillcolor = 'lightgreen',yaxis='y2',showlegend=T,legendgroup='group3')%>%
# H and Q Series
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~meanQ, name="Continuous\nDischarge",type='scatter',mode='lines',line = list(color = 'black'),showlegend=T,legendgroup='group4')%>%
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~meanH, name="Continuous\nStage",type='scatter',mode='lines',line = list(color = 'green'),yaxis='y2',showlegend=T,legendgroup='group5')%>%
# Empirical H and Q
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~streamDischarge,name="Measured\nDischarge", type='scatter', mode='markers',marker = list(color = 'blue',size=8,line = list(color = "black",width = 1)),showlegend=T,legendgroup='group6')%>%
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~gaugeHeight,name='Measured\nGauge Height',type='scatter',mode='markers',yaxis='y2',marker=list(color="purple",size=8,line = list(color = "black",width = 1)),showlegend=F,legendgroup='group7')%>%
add_trace(x=~as.POSIXct(date,format="%Y-%m-%d %H:%M:%S"),y=~gauge_Height,name='Measured\nGauge Height',type='scatter',mode='markers',yaxis='y2',marker=list(color="purple",size=8,line = list(color = "black",width = 1)),showlegend=T,legendgroup='group7')
method
runApp('AOS_App.R')
runApp('AOS_App.R')
View(DP4.00130.001)
View(DP4.00130.001)
runApp('AOS_App.R')
